---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE } from '../consts';
---

<BaseLayout title={`Open Code - ${SITE_TITLE}`} description="Interactive React + Viem examples for FloodBoy blockchain integration">
	<div class="container mx-auto px-4 py-8 max-w-6xl">
		<!-- FloodBoy Open Code Section -->
		<section class="bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-8">
			<div class="flex items-center mb-4">
				<img src="/floodboy-logo.png" alt="FloodBoy" class="h-8 w-8 mr-3 flex-shrink-0" />
				<div>
					<h1 class="text-3xl font-bold">FloodBoy Open Code</h1>
					<p class="text-lg text-gray-600">Interactive code examples for integrating with FloodBoy's blockchain infrastructure.</p>
				</div>
			</div>

			<div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
				<p class="font-semibold text-blue-800">🔗 Open Source Project</p>
				<p class="mt-2">
					<strong>GitHub Repository</strong>: <a href="https://github.com/LarisLabs/floodboy-astro" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">https://github.com/LarisLabs/floodboy-astro</a>
				</p>
				<p class="text-sm text-gray-600 mt-1">Open source • Powered by Cat Lab • Sponsored by LarisLabs</p>
			</div>

		</section>

		<div class="space-y-8">
			<!-- React + Viem Example Section -->
			<section class="bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-6">
				<h2 class="text-2xl font-semibold mb-4">React + Viem Integration</h2>
				<div class="bg-green-50 border-l-4 border-green-400 p-4 mb-4">
					<p class="text-green-800 text-sm mb-2">⚛️ <strong>Production-Ready React Demo</strong></p>
					<p class="text-green-700 text-xs">Water-focused flood monitoring dashboard with 7-day historical data visualization. Complete rebuild for 99.8% accuracy!</p>
				</div>

				<div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
					<h3 class="text-lg font-semibold text-blue-800 mb-2">🌊 Water-Focused Design</h3>
					<div class="flex flex-col sm:flex-row gap-4">
						<div class="flex-1">
							<ul class="list-disc list-inside text-sm text-blue-700 space-y-1">
								<li><strong>Primary:</strong> Water level history (always visible blue line)</li>
								<li><strong>Secondary:</strong> Battery voltage (toggleable green line)</li>
								<li><strong>Historical:</strong> 7-day timeline with 100+ data points</li>
								<li><strong>Accuracy:</strong> Perfect data (Installation=3.02m, Water=0.53m)</li>
							</ul>
						</div>
						<div class="flex-shrink-0">
							<a href="/floodboy-react-demo.html" target="_blank" rel="noopener noreferrer" 
							   class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
								🔗 View Live Demo
							</a>
						</div>
					</div>
				</div>

				<div class="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
					<h3 class="text-lg font-semibold text-yellow-800 mb-2">🚀 How to Use</h3>
					<div class="flex flex-col sm:flex-row gap-4">
						<div class="flex-1">
							<ol class="list-decimal list-inside text-sm text-yellow-700 space-y-1">
								<li>Copy the complete HTML code below</li>
								<li>Save it as <code class="bg-yellow-100 px-1 rounded">blockchain-simple.html</code></li>
								<li>Open the file in your web browser</li>
								<li>Watch the live blockchain data load and update!</li>
							</ol>
						</div>
						<div class="flex-shrink-0">
							<a href="/floodboy-react-demo.html" target="_blank" rel="noopener noreferrer" 
							   class="inline-flex items-center px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors text-sm font-medium">
								📊 Advanced Version
							</a>
						</div>
					</div>
				</div>

				<div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
					<h3 class="text-lg font-semibold text-green-800 mb-2">📊 Advanced Chart Version Available</h3>
					<div class="flex flex-col sm:flex-row gap-4">
						<div class="flex-1">
							<p class="text-sm text-green-700 mb-2">
								This simple version is perfect for learning blockchain integration. For production flood monitoring, 
								check out the advanced water-focused version with historical charts and 7-day data visualization.
							</p>
							<ul class="list-disc list-inside text-sm text-green-700 space-y-1">
								<li><strong>7-day historical timeline</strong> with 100+ data points</li>
								<li><strong>Water-focused design</strong> with toggleable battery line</li>
								<li><strong>Professional chart visualization</strong> using Chart.js</li>
								<li><strong>Same proven accuracy</strong> as this baseline version</li>
							</ul>
						</div>
						<div class="flex-shrink-0">
							<a href="/floodboy-react-demo.html" target="_blank" rel="noopener noreferrer" 
							   class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm font-medium">
								📊 View Chart Version
							</a>
						</div>
					</div>
				</div>

				<!-- Live Demo Preview -->
				<div class="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
					<h3 class="text-lg font-semibold text-gray-800 mb-4">📱 Live Preview</h3>
					<p class="text-sm text-gray-600 mb-4">
						See the code in action! This is exactly what you'll get when you copy and run the code above.
					</p>
					<div class="bg-white border-2 border-gray-300 rounded-lg overflow-hidden">
						<div class="bg-gray-100 px-4 py-2 text-xs text-gray-600 font-mono border-b">
							blockchain-simple.html - FloodBoy Simple Data Viewer
						</div>
						<iframe 
							src="/blockchain-simple.html" 
							class="w-full h-96 border-0"
							title="FloodBoy Simple Data Viewer Demo"
							loading="lazy">
						</iframe>
					</div>
					<div class="mt-3 flex flex-col sm:flex-row gap-3 text-sm">
						<a 
							href="/blockchain-simple.html" 
							target="_blank" 
							rel="noopener noreferrer"
							class="inline-flex items-center px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
						>
							🔗 Open Full Demo
						</a>
						<a 
							href="/floodboy-react-demo.html" 
							target="_blank" 
							rel="noopener noreferrer"
							class="inline-flex items-center px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
						>
							📊 Advanced Water-Focused Version
						</a>
					</div>
				</div>

				<!-- Advanced Chart Version Preview -->
				<div class="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
					<h3 class="text-lg font-semibold text-green-800 mb-4">📊 Advanced Chart Version Available</h3>
					<p class="text-sm text-green-600 mb-4">
						The production-ready version with 7-day historical water level charts and water-focused flood monitoring design.
					</p>
					
					<div class="mb-4">
						<p class="text-sm text-green-700 mb-2">
							This simple version is perfect for learning blockchain integration. For production flood monitoring, 
							check out the advanced water-focused version with historical charts and 7-day data visualization.
						</p>
						<ul class="list-disc list-inside text-sm text-green-700 space-y-1 mb-4">
							<li><strong>7-day historical timeline</strong> with 100+ data points</li>
							<li><strong>Water-focused design</strong> with toggleable battery line</li>
							<li><strong>Professional chart visualization</strong> using Chart.js</li>
							<li><strong>Same proven accuracy</strong> as this baseline version</li>
						</ul>
					</div>

					<div class="bg-white border-2 border-green-300 rounded-lg overflow-hidden">
						<div class="bg-green-100 px-4 py-2 text-xs text-green-700 font-mono border-b">
							floodboy-react-demo.html - Water-Focused Chart Version
						</div>
						<iframe 
							src="/floodboy-react-demo.html" 
							class="w-full h-96 border-0"
							title="FloodBoy Advanced Chart Demo"
							loading="lazy">
						</iframe>
					</div>
					<div class="mt-3">
						<a 
							href="/floodboy-react-demo.html" 
							target="_blank" 
							rel="noopener noreferrer"
							class="inline-flex items-center px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm"
						>
							🔗 Open Chart Version
						</a>
					</div>
				</div>

				<!-- Code Section -->
				<div class="mt-6 p-4 bg-gray-100 border border-gray-300 rounded-lg">
					<h3 class="text-lg font-semibold text-gray-800 mb-4">📝 Complete HTML Code</h3>
					<p class="text-sm text-gray-600 mb-4">
						Copy this complete HTML file and save it as <code class="bg-gray-200 px-1 rounded">blockchain-simple.html</code>
					</p>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-6 border">{`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FloodBoy - Simple Data Viewer</title>
    
    <!-- React for UI -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Viem for blockchain -->
    <script type="module">
        import * as viem from 'https://esm.sh/viem@2.21.32';
        window.viem = viem;
    </script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        
        // Configuration - Fixed addresses
        const CONFIG = {
            STORE: '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb', // FloodBoy001
            FACTORY: '0x63bB41b79b5aAc6e98C7b35Dcb0fE941b85Ba5Bb',
            RPC_URL: 'https://rpc-l1.jbc.xpool.pw',
            CHAIN_ID: 8899,
            EXPLORER_URL: 'https://exp.jibchain.net',
            SENSOR: '0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd' // Default sensor
        };

        // Minimal ABIs - only what we need
        const STORE_ABI = [
            {
                "inputs": [],
                "name": "getAllFields",
                "outputs": [{"components": [{"internalType": "string", "name": "name", "type": "string"}, {"internalType": "string", "name": "unit", "type": "string"}, {"internalType": "string", "name": "dtype", "type": "string"}], "internalType": "struct SecureSensorStore.Field[]", "name": "", "type": "tuple[]"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "sensor", "type": "address"}],
                "name": "getLatestRecord",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}, {"internalType": "int256[]", "name": "", "type": "int256[]"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "owner",
                "outputs": [{"internalType": "address", "name": "", "type": "address"}],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        const FACTORY_ABI = [
            {
                "inputs": [{"internalType": "address", "name": "", "type": "address"}],
                "name": "storeToNickname",
                "outputs": [{"internalType": "string", "name": "", "type": "string"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "store", "type": "address"}],
                "name": "getStoreMetadata",
                "outputs": [
                    {"internalType": "uint128", "name": "deployedBlock", "type": "uint128"},
                    {"internalType": "uint128", "name": "lastUpdatedBlock", "type": "uint128"},
                    {"internalType": "string", "name": "description", "type": "string"},
                    {"internalType": "string", "name": "pointer", "type": "string"}
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        // Utility functions
        const formatAddress = (address) => \`\${address.slice(0, 6)}...\${address.slice(-4)}\`;
        
        const formatValue = (value, unit) => {
            if (!value || isNaN(value)) return '0';
            const numValue = Number(value);
            
            const scalingMatch = unit.match(/x\\s*(\\d+)/i);
            if (scalingMatch) {
                const scale = parseInt(scalingMatch[1]);
                return (numValue / scale).toFixed(scale >= 100 ? 2 : 1);
            }
            return numValue.toFixed(0);
        };

        // Wait for Viem
        const waitForViem = () => {
            return new Promise((resolve) => {
                const check = () => {
                    if (window.viem) resolve(window.viem);
                    else setTimeout(check, 100);
                };
                check();
            });
        };

        // Main App Component
        const App = () => {
            const [loading, setLoading] = useState(true);
            const [data, setData] = useState(null);
            const [error, setError] = useState(null);
            const [lastUpdate, setLastUpdate] = useState(null);
            const [storeAddress, setStoreAddress] = useState(CONFIG.STORE);

            const loadData = async () => {
                if (!storeAddress || !/^0x[a-fA-F0-9]{40}$/i.test(storeAddress)) {
                    setError('Invalid contract address');
                    setLoading(false);
                    return;
                }

                setLoading(true);
                try {
                    const viem = await waitForViem();
                    const client = viem.createPublicClient({
                        transport: viem.http(CONFIG.RPC_URL)
                    });

                    // Fetch all data in parallel
                    const [fields, owner, [timestamp, values], nickname, metadata, blockNumber] = await Promise.all([
                        client.readContract({
                            address: storeAddress,
                            abi: STORE_ABI,
                            functionName: 'getAllFields'
                        }),
                        client.readContract({
                            address: storeAddress,
                            abi: STORE_ABI,
                            functionName: 'owner'
                        }),
                        client.readContract({
                            address: storeAddress,
                            abi: STORE_ABI,
                            functionName: 'getLatestRecord',
                            args: [CONFIG.SENSOR]
                        }),
                        client.readContract({
                            address: CONFIG.FACTORY,
                            abi: FACTORY_ABI,
                            functionName: 'storeToNickname',
                            args: [storeAddress]
                        }),
                        client.readContract({
                            address: CONFIG.FACTORY,
                            abi: FACTORY_ABI,
                            functionName: 'getStoreMetadata',
                            args: [storeAddress]
                        }),
                        client.getBlockNumber()
                    ]);

                    // Parse description for location and GPS
                    let location = null;
                    let gps = null;
                    if (metadata[2]) {
                        const match = metadata[2].match(/^(.+?)\\s+loc:\\s*([\\d.-]+),\\s*([\\d.-]+)$/);
                        if (match) {
                            location = match[1];
                            gps = { lat: match[2], lng: match[3] };
                        }
                    }

                    setData({
                        nickname,
                        owner,
                        fields: fields.map(f => ({ name: f.name, unit: f.unit })),
                        values: values.map(v => v.toString()),
                        timestamp: Number(timestamp),
                        location,
                        gps,
                        currentBlock: Number(blockNumber)
                    });
                    setLastUpdate(new Date());
                    setError(null);
                } catch (err) {
                    setError(err.message);
                    console.error('Error loading data:', err);
                } finally {
                    setLoading(false);
                }
            };

            // Load data on mount and every 30 seconds
            useEffect(() => {
                loadData();
                const interval = setInterval(loadData, 30000);
                return () => clearInterval(interval);
            }, [storeAddress]);

            if (loading) {
                return (
                    <div className="min-h-screen flex items-center justify-center">
                        <div className="text-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                            <p className="text-gray-600">Loading blockchain data...</p>
                        </div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="min-h-screen flex items-center justify-center">
                        <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md">
                            <h2 className="text-red-700 font-semibold mb-2">Error Loading Data</h2>
                            <p className="text-red-600 text-sm">{error}</p>
                            <button 
                                onClick={loadData}
                                className="mt-4 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
                            >
                                Retry
                            </button>
                        </div>
                    </div>
                );
            }

            return (
                <div className="min-h-screen bg-gray-50 py-8">
                    <div className="max-w-4xl mx-auto px-4">
                        {/* Contract Address Input */}
                        <div className="bg-white rounded-lg shadow-sm border p-4 mb-6">
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Store Contract Address
                            </label>
                            <div className="flex gap-2">
                                <input
                                    type="text"
                                    value={storeAddress}
                                    onChange={(e) => setStoreAddress(e.target.value)}
                                    placeholder="0x..."
                                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-gray-900 font-mono text-sm focus:ring-blue-500 focus:border-blue-500"
                                />
                                <button
                                    onClick={loadData}
                                    disabled={loading}
                                    className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md disabled:opacity-50"
                                >
                                    Load
                                </button>
                            </div>
                            <p className="mt-2 text-xs text-gray-500">
                                Enter any CatLabSensorStore contract address (Default: FloodBoy001)
                            </p>
                        </div>

                        {/* Header */}
                        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
                            <div className="flex justify-between items-start mb-4">
                                <div>
                                    <h1 className="text-3xl font-bold text-gray-900">{data.nickname}</h1>
                                    <p className="text-gray-600 mt-1">Live Sensor Data</p>
                                </div>
                                <div className="text-right">
                                    <div className="text-sm text-gray-500">
                                        <p>Block #{data.currentBlock.toLocaleString()}</p>
                                        <p className="mt-1">
                                            {lastUpdate && \`Checked: \${lastUpdate.toLocaleTimeString()}\`}
                                        </p>
                                    </div>
                                    <button 
                                        onClick={loadData}
                                        className="mt-2 bg-blue-500 hover:bg-blue-600 text-white text-sm px-3 py-1 rounded"
                                    >
                                        Refresh
                                    </button>
                                </div>
                            </div>
                            
                            <div className="grid md:grid-cols-2 gap-4 text-sm">
                                <div>
                                    <p className="text-gray-500">Contract</p>
                                    <a 
                                        href={\`\${CONFIG.EXPLORER_URL}/address/\${storeAddress}\`}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="font-mono text-blue-600 hover:text-blue-700"
                                    >
                                        {formatAddress(storeAddress)} ↗
                                    </a>
                                </div>
                                <div>
                                    <p className="text-gray-500">Owner</p>
                                    <p className="font-mono">{formatAddress(data.owner)}</p>
                                </div>
                            </div>
                        </div>

                        {/* Current Values */}
                        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
                            <h2 className="text-xl font-semibold mb-4 flex items-center">
                                <span className="w-3 h-3 bg-green-400 rounded-full mr-2 animate-pulse"></span>
                                Current Readings
                            </h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {data.fields.map((field, i) => (
                                    <div key={i} className="bg-gray-50 rounded-lg p-4">
                                        <p className="text-gray-600 text-sm">{field.name}</p>
                                        <p className="text-2xl font-bold text-blue-600 mt-1">
                                            {formatValue(data.values[i], field.unit)}
                                            <span className="text-sm font-normal text-gray-500 ml-2">
                                                {field.unit.replace(/\\s*x\\s*\\d+/gi, '')}
                                            </span>
                                        </p>
                                    </div>
                                ))}
                            </div>
                            <div className="mt-4 bg-gray-50 rounded-lg p-3 space-y-1">
                                <div className="flex justify-between text-sm">
                                    <span className="text-gray-600">Sensor Measurement Time:</span>
                                    <span className="font-medium">{new Date(data.timestamp * 1000).toLocaleString()}</span>
                                </div>
                                <div className="text-xs text-gray-500 text-center mt-2">
                                    Sensor: {CONFIG.SENSOR.slice(0, 6)}...{CONFIG.SENSOR.slice(-4)}
                                </div>
                            </div>
                        </div>

                        {/* Location Info */}
                        {(data.location || data.gps) && (
                            <div className="bg-white rounded-lg shadow-sm border p-6">
                                <h2 className="text-xl font-semibold mb-4">Location</h2>
                                {data.location && (
                                    <p className="text-gray-700 mb-2">{data.location}</p>
                                )}
                                {data.gps && (
                                    <div className="flex items-center gap-3">
                                        <span className="font-mono text-sm text-gray-600">
                                            {data.gps.lat}, {data.gps.lng}
                                        </span>
                                        <a
                                            href={\`https://www.google.com/maps?q=\${data.gps.lat},\${data.gps.lng}\`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                                        >
                                            View on Google Maps ↗
                                        </a>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </div>
            );
        };

        // Render the app
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>`}</pre>
				</div>

				<!-- Features Section -->
				<div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
					<h3 class="text-lg font-semibold text-blue-800 mb-2">⚡ Simple & Reliable Features</h3>
					<ul class="list-disc list-inside text-sm text-blue-700 space-y-1">
						<li><strong>99.8% Accuracy Baseline:</strong> The proven reference implementation (Installation=3.02m, Water=0.53m)</li>
						<li><strong>Complete Blockchain Integration:</strong> Viem.js + proper ABI handling + parallel data fetching</li>
						<li><strong>Contract Address Input:</strong> Works with any CatLabSensorStore contract address</li>
						<li><strong>Rich Sensor Data:</strong> Fields, values, timestamps, GPS location, and metadata</li>
						<li><strong>Professional UI:</strong> Clean design with loading states, error handling, and live data</li>
						<li><strong>Zero Setup:</strong> Uses CDN links - no build process required</li>
						<li><strong>Auto-refresh:</strong> Updates every 30 seconds automatically</li>
						<li><strong>Explorer Links:</strong> Direct links to JIBCHAIN L1 blockchain explorer</li>
					</ul>
				</div>
			</section>
		</div>
	</div>
</BaseLayout>