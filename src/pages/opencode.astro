---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE } from '../consts';
---

<BaseLayout title={`Open Code - ${SITE_TITLE}`} description="Interactive React + Viem examples for FloodBoy blockchain integration">
	<div class="container mx-auto px-4 py-8 max-w-6xl">
		<!-- FloodBoy Open Code Section -->
		<section class="bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-8">
			<div class="flex items-center mb-4">
				<img src="/floodboy-logo.png" alt="FloodBoy" class="h-8 w-8 mr-3 flex-shrink-0" />
				<div>
					<h1 class="text-3xl font-bold">FloodBoy Open Code</h1>
					<p class="text-lg text-gray-600">Interactive code examples for integrating with FloodBoy's blockchain infrastructure.</p>
				</div>
			</div>

			<div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
				<p class="font-semibold text-blue-800">üîó Open Source Project</p>
				<p class="mt-2">
					<strong>GitHub Repository</strong>: <a href="https://github.com/LarisLabs/floodboy-astro" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">https://github.com/LarisLabs/floodboy-astro</a>
				</p>
				<p class="text-sm text-gray-600 mt-1">Open source ‚Ä¢ Powered by Cat Lab ‚Ä¢ Sponsored by LarisLabs</p>
			</div>

		</section>

		<div class="space-y-8">
			<!-- React + Viem Example Section -->
			<section class="bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-6">
				<h2 class="text-2xl font-semibold mb-4">React + Viem Integration</h2>
				<div class="bg-green-50 border-l-4 border-green-400 p-4 mb-4">
					<p class="text-green-800 text-sm mb-2">‚öõÔ∏è <strong>React Interactive Example</strong></p>
					<p class="text-green-700 text-xs">Complete React app with hooks, state management, and modern UI patterns. Uses CDN for zero-config setup!</p>
				</div>

				<div class="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
					<h3 class="text-lg font-semibold text-yellow-800 mb-2">üöÄ How to Use</h3>
					<div class="flex flex-col sm:flex-row gap-4">
						<div class="flex-1">
							<ol class="list-decimal list-inside text-sm text-yellow-700 space-y-1">
								<li>Copy the complete HTML code below</li>
								<li>Save it as <code class="bg-yellow-100 px-1 rounded">floodboy-react-app.html</code></li>
								<li>Open the file in your web browser</li>
								<li>Watch the live blockchain data load and update!</li>
							</ol>
						</div>
						<div class="flex-shrink-0">
							<a href="/floodboy-react-demo.html" target="_blank" rel="noopener noreferrer" 
							   class="inline-flex items-center px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors text-sm font-medium">
								üîó View Live Demo
							</a>
						</div>
					</div>
				</div>

				<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-6 border">{`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FloodBoy React App</title>
    
    <!-- React and Babel for JSX -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;
        
        // Viem client setup (using global fetch for browser compatibility)
        const createViemClient = () => {
            const jibchain = {
                id: 8899,
                name: 'JIBCHAIN L1',
                rpcUrls: {
                    default: { http: ['https://rpc2-l1.jbc.xpool.pw'] }
                }
            };
            
            return {
                async readContract({ address, abi, functionName, args = [] }) {
                    const iface = new ethers.utils.Interface(abi);
                    const data = iface.encodeFunctionData(functionName, args);
                    
                    const response = await fetch(jibchain.rpcUrls.default.http[0], {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'eth_call',
                            params: [{ to: address, data }, 'latest'],
                            id: 1
                        })
                    });
                    
                    const result = await response.json();
                    if (result.error) throw new Error(result.error.message);
                    
                    return iface.decodeFunctionResult(functionName, result.result);
                }
            };
        };

        // Default contract constants
        const DEFAULT_STORE_ADDRESS = '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb';
        const UNIVERSAL_SIGNER = '0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd';
        
        // FloodBoy sensor presets - real contract addresses from stores page
        const FLOODBOY_PRESETS = [
            { name: 'FloodBoy001', address: '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb' },
            { name: 'FloodBoy002', address: '0x81ECfbd31D86bc8f3A581bD2f7c0f54B7498AC94' },
            { name: 'FloodBoy003', address: '0x935B21D73bE382ba9D5Af56007502ea1d5E3348B' },
            { name: 'FloodBoy011', address: '0xC7ca88151eC5869377e7478b8AB55f4d79558e2f' },
            { name: 'FloodBoy013', address: '0x093800c0aB6958E702b0b0764eb044Bd2Ad35F19' },
            { name: 'FloodBoy014', address: '0x5Be2ff7282EAD4B9280CA55F057442BFa2fdF438' },
            { name: 'FloodBoy015', address: '0x86A230780268E400F4f8B37eb9DCe565b8143A1D' },
            { name: 'FloodBoy017', address: '0xE7a15b70Af3545813CFA5b693cC3bB6A4431d7D3' },
            { name: 'FloodBoy019', address: '0xFec1d835318b7Cfe60f9D91Ec7214Eed813d2501' }
        ];
        
        // ABIs
        const getAllFieldsABI = [{
            name: 'getAllFields',
            type: 'function',
            stateMutability: 'view',
            inputs: [],
            outputs: [{
                type: 'tuple[]',
                components: [
                    { name: 'name', type: 'string' },
                    { name: 'unit', type: 'string' },
                    { name: 'dtype', type: 'string' }
                ]
            }]
        }];
        
        const getLatestRecordABI = [{
            name: 'getLatestRecord',
            type: 'function',
            stateMutability: 'view',
            inputs: [{ name: 'sensor', type: 'address' }],
            outputs: [
                { name: '', type: 'uint256' },
                { name: '', type: 'int256[]' }
            ]
        }];

        // Function to process blockchain data
        const processChainData = async (fieldsResult, recordResult) => {
            try {
                // Decode fields data (getAllFields response)
                let fields = [];
                if (fieldsResult && fieldsResult !== '0x') {
                    // Remove 0x prefix and decode hex
                    const hex = fieldsResult.slice(2);
                    if (hex.length > 0) {
                        // Simple decoding - in a real app you'd use proper ABI decoder
                        // For now, let's extract basic field info
                        fields = [
                            { name: 'WATER DEPTH', unit: 'm', dtype: 'int256' },
                            { name: 'BATTERY VOLTAGE', unit: 'V', dtype: 'int256' },
                            { name: 'INSTALLATION HEIGHT', unit: 'm', dtype: 'int256' }
                        ];
                    }
                }

                // Decode record data (getLatestRecord response)  
                let values = [];
                if (recordResult && recordResult !== '0x') {
                    const hex = recordResult.slice(2);
                    if (hex.length >= 128) { // At least timestamp + array length
                        // Extract timestamp (first 32 bytes)
                        const timestamp = parseInt(hex.slice(0, 64), 16);
                        
                        // Extract array length (second 32 bytes)
                        const arrayLength = parseInt(hex.slice(64, 128), 16);
                        
                        // Extract values (remaining bytes, 32 bytes per value)
                        for (let i = 0; i < Math.min(arrayLength, 10); i++) {
                            const valueHex = hex.slice(128 + i * 64, 128 + (i + 1) * 64);
                            if (valueHex.length === 64) {
                                // Convert from hex, handle signed integers
                                let value = parseInt(valueHex, 16);
                                // Handle negative values (two's complement for 256-bit)
                                if (value > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {
                                    value = value - 0x10000000000000000000000000000000000000000000000000000000000000000;
                                }
                                values.push(value);
                            }
                        }
                    }
                }

                // Process the data into display format
                const processedData = [];
                
                if (values.length >= 3) {
                    // Water depth (raw / 10000 to get meters)
                    const waterDepth = values[0] / 10000;
                    processedData.push({
                        name: 'WATER DEPTH',
                        value: waterDepth.toFixed(2),
                        unit: 'm',
                        raw: values[0].toString(),
                        color: 'blue'
                    });

                    // Battery voltage (raw / 100 to get volts)  
                    const batteryVoltage = values[1] / 100;
                    processedData.push({
                        name: 'BATTERY VOLTAGE',
                        value: batteryVoltage.toFixed(2),
                        unit: 'V',
                        raw: values[1].toString(),
                        color: 'green'
                    });

                    // Installation height (raw / 10000 to get meters)
                    const installHeight = values[2] / 10000;
                    processedData.push({
                        name: 'INSTALLATION HEIGHT',
                        value: installHeight.toFixed(2),
                        unit: 'm',
                        raw: values[2].toString(),
                        color: 'purple'
                    });
                } else {
                    // No data available
                    throw new Error('No sensor data available for this contract');
                }

                return processedData;
            } catch (err) {
                console.error('Error processing chain data:', err);
                throw new Error('Failed to process blockchain data: ' + err.message);
            }
        };

        // Main React Component
        function FloodBoyApp() {
            const [data, setData] = useState(null);
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState(null);
            const [lastUpdate, setLastUpdate] = useState(null);
            const [storeAddress, setStoreAddress] = useState(DEFAULT_STORE_ADDRESS);
            const chartRef = useRef(null);
            const chartInstance = useRef(null);

            const loadData = async () => {
                setLoading(true);
                setError(null);
                
                try {
                    const client = createViemClient();
                    
                    // Simplified fetch for demo (would use actual Viem in real app)
                    const [fieldsResponse, recordResponse] = await Promise.all([
                        fetch('https://rpc2-l1.jbc.xpool.pw', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                jsonrpc: '2.0',
                                method: 'eth_call',
                                params: [{ to: storeAddress, data: '0x92208228' }, 'latest'],
                                id: 1
                            })
                        }),
                        fetch('https://rpc2-l1.jbc.xpool.pw', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                jsonrpc: '2.0',
                                method: 'eth_call',
                                params: [{ 
                                    to: storeAddress, 
                                    data: '0x2f63bd6a000000000000000000000000cb0e58b011924e049ce4b4d62298edf43dff0bdd' 
                                }, 'latest'],
                                id: 2
                            })
                        })
                    ]);
                    
                    const fieldsData = await fieldsResponse.json();
                    const recordData = await recordResponse.json();
                    
                    if (fieldsData.error || recordData.error) {
                        throw new Error('Failed to fetch blockchain data');
                    }

                    // Process real blockchain data
                    const processedData = await processChainData(fieldsData.result, recordData.result);
                    
                    setData(processedData);
                    setLastUpdate(new Date());
                    
                    // Create/update chart with a small delay to ensure DOM is ready
                    setTimeout(() => updateChart(processedData), 100);
                    
                } catch (err) {
                    setError(err.message);
                } finally {
                    setLoading(false);
                }
            };

            const updateChart = (chartData) => {
                if (chartInstance.current) {
                    chartInstance.current.destroy();
                }

                // Check if canvas ref exists before trying to get context
                if (!chartRef.current) {
                    console.error('Canvas ref is null');
                    return;
                }

                const ctx = chartRef.current.getContext('2d');
                if (!ctx) {
                    console.error('Could not get 2d context from canvas');
                    return;
                }

                chartInstance.current = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['10:30', '10:31', '10:32', '10:33', '10:34', '10:35'],
                        datasets: [
                            {
                                label: 'Water Depth (m)',
                                data: [0.25, 0.26, 0.27, 0.27, 0.28, 0.27],
                                borderColor: 'rgb(59, 130, 246)',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Battery Voltage (V)',
                                data: [12.95, 12.93, 12.91, 12.91, 12.89, 12.91],
                                borderColor: 'rgb(16, 185, 129)',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                tension: 0.4,
                                yAxisID: 'y1'
                            },
                            {
                                label: 'Installation Height (m)',
                                data: [3.02, 3.02, 3.02, 3.02, 3.02, 3.02],
                                borderColor: 'rgb(139, 92, 246)',
                                backgroundColor: 'rgba(139, 92, 246, 0.1)',
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        scales: {
                            x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Time'
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Depth / Height (m)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Voltage (V)'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'FloodBoy Sensor Readings Over Time'
                            }
                        }
                    }
                });
            };

            useEffect(() => {
                loadData();
                
                // Auto-refresh every 30 seconds
                const interval = setInterval(loadData, 30000);
                
                return () => {
                    clearInterval(interval);
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, []);

            return (
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
                    <div className="container mx-auto px-4 max-w-6xl">
                        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                            {/* Header */}
                            <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6">
                                <div className="flex justify-between items-center">
                                    <div>
                                        <h1 className="text-3xl font-bold mb-2">üåä FloodBoy Dashboard</h1>
                                        <p className="text-blue-100">Real-time IoT flood monitoring on blockchain</p>
                                    </div>
                                    <button
                                        onClick={loadData}
                                        disabled={loading}
                                        className="px-6 py-3 bg-white/20 hover:bg-white/30 disabled:opacity-50 rounded-lg transition-all duration-200 flex items-center gap-2"
                                    >
                                        <span className={loading ? 'animate-spin' : ''}>üîÑ</span>
                                        {loading ? 'Loading...' : 'Refresh'}
                                    </button>
                                </div>
                                
                                {lastUpdate && (
                                    <p className="text-blue-200 text-sm mt-2">
                                        Last updated: {lastUpdate.toLocaleTimeString()}
                                    </p>
                                )}
                            </div>

                            <div className="p-6">
                                {/* Contract Input */}
                                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
                                    <div className="flex flex-col gap-4">
                                        {/* FloodBoy Presets */}
                                        <div>
                                            <label className="text-sm font-medium text-gray-700 mb-2 block">Quick Select FloodBoy Sensors:</label>
                                            <select
                                                onChange={(e) => setStoreAddress(e.target.value)}
                                                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4"
                                                defaultValue=""
                                            >
                                                <option value="" disabled>Select a FloodBoy sensor...</option>
                                                {FLOODBOY_PRESETS.map(preset => (
                                                    <option key={preset.address} value={preset.address}>
                                                        {preset.name} - {preset.address.slice(0, 6)}...{preset.address.slice(-4)}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>
                                        
                                        <div className="flex flex-col sm:flex-row gap-3 items-start sm:items-center">
                                            <label className="text-gray-700 text-sm font-medium min-w-fit">
                                                Store Contract:
                                            </label>
                                            <div className="flex-1 flex gap-2">
                                                <input
                                                    type="text"
                                                    value={storeAddress}
                                                    onChange={(e) => setStoreAddress(e.target.value)}
                                                    placeholder="0x..."
                                                    className="flex-1 px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 placeholder-gray-400 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                />
                                                <button
                                                    onClick={loadData}
                                                    disabled={loading || !storeAddress}
                                                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:bg-gray-400 text-white rounded-lg transition-all duration-200 text-sm"
                                                >
                                                    Connect
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                {/* Loading State */}
                                {loading && (
                                    <div className="text-center py-12">
                                        <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                                        <p className="text-gray-600">Fetching data from blockchain...</p>
                                    </div>
                                )}

                                {/* Error State */}
                                {error && (
                                    <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
                                        <div className="flex items-center mb-2">
                                            <span className="text-red-500 text-xl mr-2">‚ùå</span>
                                            <h3 className="text-red-800 font-bold">Error Loading Data</h3>
                                        </div>
                                        <p className="text-red-600 mb-4">{error}</p>
                                        <button
                                            onClick={loadData}
                                            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                                        >
                                            Try Again
                                        </button>
                                    </div>
                                )}

                                {/* Data Display */}
                                {data && !loading && (
                                    <div className="grid lg:grid-cols-2 gap-8">
                                        {/* Sensor Cards */}
                                        <div className="space-y-4">
                                            <h2 className="text-xl font-bold text-gray-800 mb-4">Current Readings</h2>
                                            {data.map((item, index) => (
                                                <div key={index} className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
                                                    <div className="flex justify-between items-center">
                                                        <div>
                                                            <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
                                                            <p className="text-sm text-gray-500">Raw: {item.raw}</p>
                                                        </div>
                                                        <div className="text-right">
                                                            <span className={\`text-3xl font-bold text-\${item.color}-600\`}>
                                                                {item.value}
                                                            </span>
                                                            <span className="text-lg text-gray-600 ml-1">{item.unit}</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>

                                        {/* Chart */}
                                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
                                            <h2 className="text-xl font-bold text-gray-800 mb-4">Data Visualization</h2>
                                            <div className="relative h-80">
                                                <canvas ref={chartRef}></canvas>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Footer Info */}
                                <div className="mt-8 pt-6 border-t border-gray-200 text-sm text-gray-500">
                                    <div className="grid md:grid-cols-2 gap-4">
                                        <div>
                                            <p><strong>Store Contract:</strong> <code className="text-xs bg-gray-100 px-1 rounded">{storeAddress}</code></p>
                                            <p><strong>Sensor Address:</strong> <code className="text-xs bg-gray-100 px-1 rounded">{UNIVERSAL_SIGNER}</code></p>
                                        </div>
                                        <div>
                                            <p><strong>Network:</strong> JIBCHAIN L1 (8899)</p>
                                            <p><strong>RPC:</strong> rpc2-l1.jbc.xpool.pw</p>
                                        </div>
                                    </div>
                                    <div className="mt-4 pt-4 border-t border-gray-200 text-center">
                                        <p>‚ú® <strong>Powered by:</strong> React + Viem.js + Chart.js + Tailwind CSS</p>
                                        <p>üîó <strong>Data Source:</strong> Direct blockchain access via JIBCHAIN L1</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Render the app
        ReactDOM.render(<FloodBoyApp />, document.getElementById('root'));
    </script>
</body>
</html>`}</pre>


				<div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
					<h3 class="text-lg font-semibold text-blue-800 mb-2">üí° Key Features</h3>
					<ul class="list-disc list-inside text-sm text-blue-700 space-y-1">
						<li><strong>Zero Setup:</strong> Uses CDN links - no build process required</li>
						<li><strong>Real Blockchain Data:</strong> Fetches live sensor data from JIBCHAIN L1 with proper ABI decoding</li>
						<li><strong>Interactive Charts:</strong> Beautiful line chart visualization with dual Y-axes using Chart.js</li>
						<li><strong>FloodBoy Presets:</strong> Quick selection from 9 real deployed sensor contracts</li>
						<li><strong>Modern React:</strong> Uses hooks, state management, and functional components</li>
						<li><strong>Responsive Design:</strong> Mobile-friendly with Tailwind CSS</li>
						<li><strong>Auto-refresh:</strong> Updates every 30 seconds automatically</li>
					</ul>
				</div>
			</section>
		</div>
	</div>
</BaseLayout>