---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { BLOCKCHAIN_CONFIG } from '../config/blockchain.config';
import '../styles/global.css';

// Prepare configuration for injection
const configJson = JSON.stringify(BLOCKCHAIN_CONFIG);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`IoT Stores | ${SITE_TITLE}`} description="Browse all deployed IoT sensor stores" />
    
    <!-- React -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
      .store-card {
        transition: all 0.3s ease;
        cursor: pointer;
        backdrop-filter: blur(10px);
      }
      
      .store-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      .skeleton {
        animation: shimmer 2s infinite;
        background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
        background-size: 200% 100%;
      }
      
      @keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
      }
      
      /* Modern button styling */
      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: 0.375rem;
        transition: all 0.2s ease;
        border: 1px solid transparent;
        cursor: pointer;
        text-decoration: none;
      }
      
      .btn-primary {
        background-color: #3b82f6;
        color: white;
        border: none;
      }
      
      .btn-primary:hover {
        background-color: #2563eb;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-primary:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
      }
      
      .btn-secondary {
        background-color: #ffffff;
        color: #374151;
        border: 1px solid #d1d5db;
      }
      
      .btn-secondary:hover {
        background-color: #f9fafb;
        border-color: #9ca3af;
      }
      
      /* Modern select styling */
      .select-modern {
        background-color: #ffffff;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        padding: 0.5rem 2.5rem 0.5rem 1rem;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        cursor: pointer;
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5em 1.5em;
      }
      
      .select-modern:hover {
        border-color: #9ca3af;
      }
      
      .select-modern:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }
      
      /* Card hover effects */
      .card-link {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.875rem;
        font-size: 0.75rem;
        font-weight: 500;
        border-radius: 0.25rem;
        transition: all 0.2s ease;
        text-decoration: none;
      }
      
      @media (min-width: 640px) {
        .card-link {
          padding: 0.5rem 1rem;
          font-size: 0.875rem;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div id="stores-app"></div>
    </main>
    <Footer />
    
    <script type="module" define:vars={{ BLOCKCHAIN_CONFIG: configJson }}>
      import { createPublicClient, http, formatEther, encodeFunctionData, decodeFunctionResult } from 'https://esm.sh/viem@2.21.19';
      
      // Define constants inline
      const MULTICALL3_ADDRESS = "0xcA11bde05977b3631167028862bE2a173976CA11";
      
      // Configuration injected at build time
      const CONTRACTS = JSON.parse(BLOCKCHAIN_CONFIG);
      
      // Define ABIs
      const DEPLOYER_ABI = [
        {
          "inputs": [
            {"internalType": "uint256", "name": "start", "type": "uint256"},
            {"internalType": "uint256", "name": "count", "type": "uint256"}
          ],
          "name": "getStoresReverse",
          "outputs": [{"internalType": "address[]", "name": "", "type": "address[]"}],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [{"internalType": "address", "name": "store", "type": "address"}],
          "name": "getStoreInfo",
          "outputs": [
            {"internalType": "string", "name": "nickname", "type": "string"},
            {"internalType": "address", "name": "owner", "type": "address"},
            {"internalType": "uint256", "name": "authorizedSensorCount", "type": "uint256"},
            {"internalType": "bool", "name": "isEventOnly", "type": "bool"},
            {"internalType": "uint128", "name": "deployedBlock", "type": "uint128"},
            {"internalType": "string", "name": "description", "type": "string"}
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllStoresCount",
          "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
          "stateMutability": "view",
          "type": "function"
        }
      ];
      
      const STORE_ABI = [
        {
          "inputs": [],
          "name": "getAllFields",
          "outputs": [{"components": [{"internalType": "string", "name": "name", "type": "string"}, {"internalType": "string", "name": "unit", "type": "string"}, {"internalType": "string", "name": "dtype", "type": "string"}], "internalType": "struct SecureSensorStore.Field[]", "name": "", "type": "tuple[]"}],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "authorizedSensorCount",
          "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [{"internalType": "address", "name": "sensor", "type": "address"}],
          "name": "getLatestRecord",
          "outputs": [
            {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
            {"internalType": "int256[]", "name": "values", "type": "int256[]"}
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [{"internalType": "address", "name": "sensor", "type": "address"}],
          "name": "hasData",
          "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
          "stateMutability": "view",
          "type": "function"
        }
      ];
      
      const MULTICALL3_ABI = [
        {
          inputs: [
            {
              components: [
                { name: 'target', type: 'address' },
                { name: 'allowFailure', type: 'bool' },
                { name: 'callData', type: 'bytes' }
              ],
              name: 'calls',
              type: 'tuple[]'
            }
          ],
          name: 'aggregate3',
          outputs: [
            {
              components: [
                { name: 'success', type: 'bool' },
                { name: 'returnData', type: 'bytes' }
              ],
              name: 'returnData',
              type: 'tuple[]'
            }
          ],
          stateMutability: 'payable',
          type: 'function'
        }
      ];
      
      // Define chains
      const jibchainL1 = {
        id: 8899,
        name: 'JIBCHAIN L1',
        network: 'jibchain',
        nativeCurrency: { name: 'JBC', symbol: 'JBC', decimals: 18 },
        rpcUrls: {
          default: { http: ['https://rpc-l1.jbc.xpool.pw'] },
          public: { http: ['https://rpc-l1.jbc.xpool.pw'] }
        },
        blockExplorers: {
          default: { name: 'JBC Explorer', url: 'https://exp.jibchain.net' }
        }
      };
      
      const sichang = {
        id: 700011,
        name: 'SiChang',
        network: 'sichang',
        nativeCurrency: { name: 'TCH', symbol: 'TCH', decimals: 18 },
        rpcUrls: {
          default: { http: ['https://sichang-rpc.thaichain.org'] },
          public: { http: ['https://sichang-rpc.thaichain.org'] }
        },
        blockExplorers: {
          default: { name: 'SiChang Explorer', url: 'https://sichang.thaichain.org' }
        }
      };
      
      const anvil = {
        id: 31337,
        name: 'Anvil',
        network: 'foundry',
        nativeCurrency: { name: 'Ethereum', symbol: 'ETH', decimals: 18 },
        rpcUrls: {
          default: { http: ['http://127.0.0.1:8545'] },
          public: { http: ['http://127.0.0.1:8545'] }
        }
      };
      
      // Simple multicall function
      async function simpleMulticall(publicClient, calls) {
        const multicallData = calls.map(call => ({
          target: call.target,
          allowFailure: true,
          callData: encodeFunctionData({
            abi: call.abi,
            functionName: call.functionName,
            args: call.args || []
          })
        }));

        const results = await publicClient.readContract({
          address: MULTICALL3_ADDRESS,
          abi: MULTICALL3_ABI,
          functionName: 'aggregate3',
          args: [multicallData]
        });

        return results.map((result, index) => {
          if (!result.success) {
            return { success: false, data: null };
          }

          try {
            const decoded = decodeFunctionResult({
              abi: calls[index].abi,
              functionName: calls[index].functionName,
              data: result.returnData
            });
            return { success: true, data: decoded };
          } catch (error) {
            return { success: false, data: null };
          }
        });
      }
      
      // Make imports available globally
      window.viem = { createPublicClient, http, formatEther };
      window.constants = { CONTRACTS, MULTICALL3_ADDRESS, DEPLOYER_ABI, STORE_ABI };
      window.chains = { jibchainL1, sichang, anvil };
      window.simpleMulticall = simpleMulticall;
    </script>
    
    <script type="text/babel">
      const { useState, useEffect } = React;
      const { createPublicClient, http, formatEther } = window.viem;
      const { CONTRACTS, MULTICALL3_ADDRESS, DEPLOYER_ABI, STORE_ABI } = window.constants;
      const { jibchainL1, sichang, anvil } = window.chains;
      const { simpleMulticall } = window;
      
      // Helper functions
      const formatAddress = (address) => `${address.slice(0, 6)}...${address.slice(-4)}`;
      
      const getChainById = (chainId) => {
        switch (chainId) {
          case 8899: return jibchainL1;
          case 700011: return sichang;
          case 31337: return anvil;
          default: return jibchainL1;
        }
      };
      
      // Store Card Component
      const StoreCard = ({ store, index }) => {
        const gradients = [
          'bg-gradient-to-br from-purple-600 to-blue-600',
          'bg-gradient-to-br from-blue-600 to-pink-600',
          'bg-gradient-to-br from-cyan-600 to-teal-600',
          'bg-gradient-to-br from-emerald-600 to-green-600',
          'bg-gradient-to-br from-orange-600 to-amber-600'
        ];
        const gradientClass = gradients[index % 5];
        
        const handleCardClick = () => {
          window.location.href = `/blockchain/${store.address}`;
        };
        
        return (
          <div 
            className={`store-card relative rounded-xl overflow-hidden ${gradientClass} p-4 sm:p-6 text-white shadow-lg`}
            onClick={handleCardClick}
          >
            {/* Status indicator */}
            <div className="absolute top-4 right-4">
              {store.hasData ? (
                <div className="flex items-center gap-1 bg-green-500/20 backdrop-blur px-2 py-1 rounded-full">
                  <span className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
                  <span className="text-xs font-medium">Active</span>
                </div>
              ) : (
                <div className="flex items-center gap-1 bg-yellow-500/20 backdrop-blur px-2 py-1 rounded-full">
                  <span className="w-2 h-2 bg-yellow-400 rounded-full"></span>
                  <span className="text-xs font-medium">Pending</span>
                </div>
              )}
            </div>
            
            <div className="relative z-10">
              <h3 className="text-lg font-bold mb-2 cursor-pointer sm:text-xl break-all pr-20">
                {store.nickname || 'Unnamed Store'}
              </h3>
              
              <p className="text-white/80 text-xs sm:text-sm mb-4 cursor-pointer line-clamp-2">
                {store.description || 'No description available'}
              </p>
              
              <div className="flex flex-col gap-2 text-xs sm:flex-row sm:items-center sm:justify-between sm:text-sm cursor-pointer">
                <span className="font-mono text-xs sm:text-sm break-all">{formatAddress(store.address)}</span>
                <div className="flex flex-wrap gap-2 sm:gap-4">
                  <span>{store.fieldCount || 0} fields</span>
                  <span>{store.sensorCount || 0} sensors</span>
                </div>
              </div>
              
              <div className="mt-4 flex flex-wrap gap-2">
                <a 
                  href={`/blockchain/${store.address}`}
                  className="card-link bg-white/20 backdrop-blur text-white hover:bg-white/30"
                  onClick={(e) => e.stopPropagation()}
                >
                  View Data
                </a>
                <a 
                  href={`${CONTRACTS[store.chainId].EXPLORER_URL}/address/${store.address}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="card-link bg-white/20 backdrop-blur text-white hover:bg-white/30"
                  onClick={(e) => e.stopPropagation()}
                >
                  Explorer
                </a>
              </div>
            </div>
          </div>
        );
      };
      
      // Loading Skeleton
      const LoadingSkeleton = () => (
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
          {[1, 2, 3, 4, 5, 6].map(i => (
            <div key={i} className="rounded-xl bg-gray-200 p-6">
              <div className="skeleton h-6 w-3/4 rounded mb-2"></div>
              <div className="skeleton h-4 w-full rounded mb-4"></div>
              <div className="skeleton h-4 w-1/2 rounded"></div>
            </div>
          ))}
        </div>
      );
      
      // Main App Component
      const StoresApp = () => {
        const [chainId, setChainId] = useState(8899);
        const [stores, setStores] = useState([]);
        const [loading, setLoading] = useState(true);
        const [error, setError] = useState(null);
        const [totalStores, setTotalStores] = useState(0);
        const [currentOffset, setCurrentOffset] = useState(0);
        const [loadingMore, setLoadingMore] = useState(false);
        const [sortOrder, setSortOrder] = useState('newest'); // 'newest' or 'oldest'
        const STORES_PER_PAGE = 20;
        
        // Fetch stores using multicall
        const fetchStores = async (loadMore = false) => {
          if (loadMore) {
            setLoadingMore(true);
          } else {
            setLoading(true);
            setCurrentOffset(0);
          }
          setError(null);
          
          try {
            const chain = getChainById(chainId);
            const publicClient = createPublicClient({
              chain,
              transport: http()
            });
            
            const factoryAddress = CONTRACTS[chainId].DEPLOYER_ADDRESS;
            
            // First, try to get total store count
            let storeCount = 0;
            try {
              storeCount = await publicClient.readContract({
                address: factoryAddress,
                abi: DEPLOYER_ABI,
                functionName: 'getAllStoresCount'
              });
              setTotalStores(Number(storeCount));
            } catch (err) {
              console.error('Could not fetch store count:', err);
              throw err;
            }
            
            if (Number(storeCount) === 0) {
              setStores([]);
              setLoading(false);
              setLoadingMore(false);
              return;
            }
            
            // Calculate which stores to fetch
            const totalCount = Number(storeCount);
            const offset = loadMore ? currentOffset : 0;
            const count = Math.min(STORES_PER_PAGE, totalCount - offset);
            
            if (count <= 0) {
              setLoadingMore(false);
              return;
            }
            
            console.log('Fetching stores:', {
              totalStores: totalCount,
              offset,
              count,
              sortOrder
            });
            
            // Get stores using reverse method
            // getStoresReverse(offset, count) should return stores from end-offset-count to end-offset
            const storeAddresses = await publicClient.readContract({
              address: factoryAddress,
              abi: DEPLOYER_ABI,
              functionName: 'getStoresReverse',
              args: [BigInt(offset), BigInt(count)]
            });
            
            if (!storeAddresses || storeAddresses.length === 0) {
              if (!loadMore) {
                setStores([]);
              }
              setLoading(false);
              setLoadingMore(false);
              return;
            }
            
            // Phase 1: Get store info first
            const phase1Calls = [];
            storeAddresses.forEach(address => {
              // Get store info from factory
              phase1Calls.push({
                target: factoryAddress,
                abi: DEPLOYER_ABI,
                functionName: 'getStoreInfo',
                args: [address]
              });
              
              // Get fields from store
              phase1Calls.push({
                target: address,
                abi: STORE_ABI,
                functionName: 'getAllFields'
              });
              
              // Get sensor count from store
              phase1Calls.push({
                target: address,
                abi: STORE_ABI,
                functionName: 'authorizedSensorCount'
              });
            });
            
            // Execute phase 1 multicall
            const phase1Results = await simpleMulticall(publicClient, phase1Calls);
            
            // Process phase 1 results to get store info
            const storeInfos = [];
            for (let i = 0; i < storeAddresses.length; i++) {
              const infoResult = phase1Results[i * 3];
              const fieldsResult = phase1Results[i * 3 + 1];
              const sensorCountResult = phase1Results[i * 3 + 2];
              
              storeInfos.push({
                address: storeAddresses[i],
                chainId,
                nickname: infoResult.success ? infoResult.data[0] : 'Unknown',
                owner: infoResult.success ? infoResult.data[1] : null,
                description: infoResult.success ? infoResult.data[5] : '',
                fieldCount: fieldsResult.success ? fieldsResult.data.length : 0,
                sensorCount: sensorCountResult.success ? Number(sensorCountResult.data) : 0,
                deployedBlock: infoResult.success ? Number(infoResult.data[4]) : 0,
                // Calculate the actual index in the factory array
                // getStoresReverse returns from (total - offset - count) to (total - offset)
                factoryIndex: totalCount - offset - count + i
              });
            }
            
            // Phase 2: Check for data by trying multiple possible sensor addresses
            // We'll check: 1) owner address, 2) store address itself, 3) a known sensor pattern
            const phase2Calls = [];
            const phase2StoreIndices = []; // Track which store each call belongs to
            
            storeInfos.forEach((store, index) => {
              // Check owner address
              if (store.owner) {
                phase2Calls.push({
                  target: store.address,
                  abi: STORE_ABI,
                  functionName: 'getLatestRecord',
                  args: [store.owner]
                });
                phase2StoreIndices.push({ storeIndex: index, checkType: 'owner' });
              }
              
              // Also check the store address itself (some sensors use this)
              phase2Calls.push({
                target: store.address,
                abi: STORE_ABI,
                functionName: 'getLatestRecord',
                args: [store.address]
              });
              phase2StoreIndices.push({ storeIndex: index, checkType: 'self' });
            });
            
            // Execute phase 2 multicall
            let phase2Results = [];
            if (phase2Calls.length > 0) {
              phase2Results = await simpleMulticall(publicClient, phase2Calls);
            }
            
            // Process results - mark store as having data if ANY check returns data
            const processedStores = [];
            const storeHasData = new Array(storeInfos.length).fill(false);
            
            phase2Results.forEach((result, idx) => {
              const { storeIndex } = phase2StoreIndices[idx];
              if (result.success) {
                const [timestamp] = result.data;
                if (Number(timestamp) > 0) {
                  storeHasData[storeIndex] = true;
                }
              }
            });
            
            // Build final store list with hasData flag
            for (let i = 0; i < storeInfos.length; i++) {
              const store = storeInfos[i];
              store.hasData = storeHasData[i];
              processedStores.push(store);
            }
            
            // Sort based on user preference
            if (sortOrder === 'oldest') {
              // For oldest first, lower index comes first
              processedStores.sort((a, b) => a.factoryIndex - b.factoryIndex);
            } else {
              // For newest first, higher index comes first
              processedStores.sort((a, b) => b.factoryIndex - a.factoryIndex);
            }
            
            // Update stores - append if loading more, replace if not
            if (loadMore) {
              setStores(prev => [...prev, ...processedStores]);
              setCurrentOffset(currentOffset + count);
            } else {
              setStores(processedStores);
              setCurrentOffset(count);
            }
          } catch (err) {
            console.error('Error fetching stores:', err);
            setError(err.message);
          } finally {
            setLoading(false);
            setLoadingMore(false);
          }
        };
        
        // Fetch stores on mount, chain change, or sort change
        useEffect(() => {
          fetchStores();
        }, [chainId, sortOrder]);
        
        return (
          <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 sm:py-8 lg:px-8">
            {/* Header */}
            <div className="mb-6 sm:mb-8">
              <h1 className="text-2xl font-bold text-gray-900 mb-2 sm:text-3xl">IoT Sensor Stores</h1>
              <p className="text-sm text-gray-600 sm:text-base">Browse all deployed sensor data stores</p>
            </div>
            
            {/* Controls */}
            <div className="flex flex-col gap-4 mb-6 sm:flex-row sm:items-center sm:justify-between">
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
                <select
                  value={chainId}
                  onChange={(e) => setChainId(Number(e.target.value))}
                  className="select-modern w-full sm:w-auto"
                >
                  <option value={8899}>JIBCHAIN L1</option>
                  <option value={700011}>SiChang</option>
                  <option value={31337}>Anvil Local</option>
                </select>
                
                <select
                  value={sortOrder}
                  onChange={(e) => {
                    setSortOrder(e.target.value);
                    fetchStores(); // Refresh with new sort
                  }}
                  className="select-modern w-full sm:w-auto"
                >
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                </select>
                
                {totalStores > 0 && (
                  <span className="text-gray-600">
                    Showing {stores.length} of {totalStores} stores
                  </span>
                )}
              </div>
              
              <button
                onClick={fetchStores}
                disabled={loading}
                className="btn btn-primary w-full sm:w-auto"
              >
                {loading ? 'Loading...' : 'Refresh'}
              </button>
            </div>
            
            {/* Error State */}
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
                Error: {error}
              </div>
            )}
            
            {/* Content */}
            {loading ? (
              <LoadingSkeleton />
            ) : stores.length > 0 ? (
              <>
                {/* Group stores by installation status */}
                {(() => {
                  const installedStores = stores.filter(s => s.hasData);
                  const pendingStores = stores.filter(s => !s.hasData);
                  
                  return (
                    <>
                      {/* Installed Sensors Section */}
                      <div className="mb-12">
                        <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                          <span className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
                          Installed Sensors ({installedStores.length})
                        </h2>
                        {installedStores.length > 0 ? (
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {installedStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={index} />
                            ))}
                          </div>
                        ) : (
                          <div className="text-gray-500 text-center py-8 bg-gray-50 rounded-lg">
                            No sensors are currently reporting data
                          </div>
                        )}
                      </div>
                      
                      {/* Being Installed Section */}
                      <div>
                        <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                          <span className="w-3 h-3 bg-yellow-500 rounded-full"></span>
                          Being Installed ({pendingStores.length})
                        </h2>
                        {pendingStores.length > 0 ? (
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {pendingStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={installedStores.length + index} />
                            ))}
                          </div>
                        ) : (
                          <div className="text-gray-500 text-center py-8 bg-gray-50 rounded-lg">
                            No sensors pending installation
                          </div>
                        )}
                      </div>
                    </>
                  );
                })()}
              </>
            ) : (
              <div className="text-center py-8 sm:py-12">
                <p className="text-gray-600 text-base sm:text-lg">No stores deployed on {getChainById(chainId).name} yet</p>
                <p className="text-gray-500 mt-2">Deploy your first store to get started</p>
              </div>
            )}
            
            {/* Load More */}
            {!loading && !loadingMore && stores.length < totalStores && (
              <div className="text-center mt-8">
                <button 
                  onClick={() => fetchStores(true)}
                  className="btn btn-secondary"
                >
                  Load More ({totalStores - stores.length} remaining)
                </button>
              </div>
            )}
            
            {/* Loading More Indicator */}
            {loadingMore && (
              <div className="text-center mt-8">
                <button disabled className="btn btn-secondary">
                  Loading...
                </button>
              </div>
            )}
          </div>
        );
      };
      
      // Render the app
      ReactDOM.render(<StoresApp />, document.getElementById('stores-app'));
    </script>
  </body>
</html>