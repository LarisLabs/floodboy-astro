---
// FloodBoy Blockchain IoT Sensor Dashboard - Production Deploy 2025-07-25
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { BLOCKCHAIN_CONFIG } from '../config/blockchain.config';
import { CatLabSensorStoreABI, CatLabFactoryABI } from '../abis';
import '../styles/global.css';

// Prepare configuration for injection
const configJson = JSON.stringify(BLOCKCHAIN_CONFIG);
const storeAbiJson = JSON.stringify(CatLabSensorStoreABI);
const factoryAbiJson = JSON.stringify(CatLabFactoryABI);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`IoT Stores | ${SITE_TITLE}`} description="Browse all deployed IoT sensor stores" />
    
    <!-- React -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
      .store-card {
        transition: all 0.3s ease;
        cursor: pointer;
        backdrop-filter: blur(10px);
      }
      
      .store-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      .skeleton {
        animation: shimmer 2s infinite;
        background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
        background-size: 200% 100%;
      }
      
      @keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
      }
      
      /* Modern button styling */
      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: 0.375rem;
        transition: all 0.2s ease;
        border: 1px solid transparent;
        cursor: pointer;
        text-decoration: none;
      }
      
      .btn-primary {
        background-color: #3b82f6;
        color: white;
        border: none;
      }
      
      .btn-primary:hover {
        background-color: #2563eb;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-primary:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
      }
      
      .btn-secondary {
        background-color: #f3f4f6;
        color: #1f2937;
        border: 1px solid #d1d5db;
      }
      
      .btn-secondary:hover {
        background-color: #e5e7eb;
        border-color: #9ca3af;
        color: #111827;
      }
      
      /* Modern select styling */
      .select-modern {
        background-color: #ffffff;
        color: #1f2937;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        padding: 0.5rem 2.5rem 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23374151' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5em 1.5em;
      }
      
      .select-modern:hover {
        border-color: #9ca3af;
        color: #111827;
      }
      
      .select-modern:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        color: #111827;
      }
      
      /* Card hover effects */
      .card-link {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.875rem;
        font-size: 0.75rem;
        font-weight: 500;
        border-radius: 0.25rem;
        transition: all 0.2s ease;
        text-decoration: none;
      }
      
      @media (min-width: 640px) {
        .card-link {
          padding: 0.5rem 1rem;
          font-size: 0.875rem;
        }
      }
      
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div id="stores-app"></div>
    </main>
    <Footer />
    
    <script type="module" define:vars={{ BLOCKCHAIN_CONFIG: configJson, STORE_ABI_JSON: storeAbiJson, FACTORY_ABI_JSON: factoryAbiJson }}>
      import { createPublicClient, http, formatEther, encodeFunctionData, decodeFunctionResult } from 'https://esm.sh/viem@2.21.19';
      
      // Parse ABIs from server
      const STORE_ABI = JSON.parse(STORE_ABI_JSON);
      const DEPLOYER_ABI = JSON.parse(FACTORY_ABI_JSON);
      
      // Define constants inline
      const MULTICALL3_ADDRESS = "0xcA11bde05977b3631167028862bE2a173976CA11";
      
      // Configuration injected at build time
      const CONTRACTS = JSON.parse(BLOCKCHAIN_CONFIG);
      
      const MULTICALL3_ABI = [
        {
          inputs: [
            {
              components: [
                { name: 'target', type: 'address' },
                { name: 'allowFailure', type: 'bool' },
                { name: 'callData', type: 'bytes' }
              ],
              name: 'calls',
              type: 'tuple[]'
            }
          ],
          name: 'aggregate3',
          outputs: [
            {
              components: [
                { name: 'success', type: 'bool' },
                { name: 'returnData', type: 'bytes' }
              ],
              name: 'returnData',
              type: 'tuple[]'
            }
          ],
          stateMutability: 'payable',
          type: 'function'
        }
      ];
      
      // Define chains
      const jibchainL1 = {
        id: 8899,
        name: 'JIBCHAIN L1',
        network: 'jibchain',
        nativeCurrency: { name: 'JBC', symbol: 'JBC', decimals: 18 },
        rpcUrls: {
          default: { http: ['https://rpc-l1.jibchain.net'] },
          public: { http: ['https://rpc-l1.jibchain.net'] }
        },
        blockExplorers: {
          default: { name: 'JBC Explorer', url: 'https://exp.jibchain.net' }
        }
      };
      
      const sichang = {
        id: 700011,
        name: 'SiChang',
        network: 'sichang',
        nativeCurrency: { name: 'TCH', symbol: 'TCH', decimals: 18 },
        rpcUrls: {
          default: { http: ['https://sichang-rpc.thaichain.org'] },
          public: { http: ['https://sichang-rpc.thaichain.org'] }
        },
        blockExplorers: {
          default: { name: 'SiChang Explorer', url: 'https://sichang.thaichain.org' }
        }
      };
      
      const anvil = {
        id: 31337,
        name: 'Anvil',
        network: 'foundry',
        nativeCurrency: { name: 'Ethereum', symbol: 'ETH', decimals: 18 },
        rpcUrls: {
          default: { http: ['http://127.0.0.1:8545'] },
          public: { http: ['http://127.0.0.1:8545'] }
        }
      };
      
      // Simple multicall function
      async function simpleMulticall(publicClient, calls) {
        const multicallData = calls.map(call => ({
          target: call.target,
          allowFailure: true,
          callData: encodeFunctionData({
            abi: call.abi,
            functionName: call.functionName,
            args: call.args || []
          })
        }));

        const results = await publicClient.readContract({
          address: MULTICALL3_ADDRESS,
          abi: MULTICALL3_ABI,
          functionName: 'aggregate3',
          args: [multicallData]
        });

        return results.map((result, index) => {
          if (!result.success) {
            return { success: false, data: null };
          }

          try {
            const decoded = decodeFunctionResult({
              abi: calls[index].abi,
              functionName: calls[index].functionName,
              data: result.returnData
            });
            return { success: true, data: decoded };
          } catch (error) {
            return { success: false, data: null };
          }
        });
      }
      
      // Make imports available globally
      window.viem = { createPublicClient, http, formatEther, encodeFunctionData, decodeFunctionResult };
      window.constants = { CONTRACTS, MULTICALL3_ADDRESS, DEPLOYER_ABI, STORE_ABI };
      window.chains = { jibchainL1, sichang, anvil };
      window.simpleMulticall = simpleMulticall;
    </script>
    
    <script type="text/babel">
      const { useState, useEffect } = React;
      const { createPublicClient, http, formatEther } = window.viem;
      const { CONTRACTS, MULTICALL3_ADDRESS, DEPLOYER_ABI, STORE_ABI } = window.constants;
      const { jibchainL1, sichang, anvil } = window.chains;
      const { simpleMulticall } = window;
      
      // Helper functions
      const formatAddress = (address) => `${address.slice(0, 6)}...${address.slice(-4)}`;
      
      const getChainById = (chainId) => {
        switch (chainId) {
          case 8899: return jibchainL1;
          case 700011: return sichang;
          case 31337: return anvil;
          default: return jibchainL1;
        }
      };
      
      // Store Card Component
      const StoreCard = ({ store, index }) => {
        // All cards use rotating gradients
        const gradients = [
          'bg-gradient-to-br from-blue-600 to-cyan-600',
          'bg-gradient-to-br from-emerald-600 to-teal-600',
          'bg-gradient-to-br from-orange-600 to-amber-600',
          'bg-gradient-to-br from-pink-600 to-rose-600',
          'bg-gradient-to-br from-indigo-600 to-blue-600'
        ];
        const gradientClass = gradients[index % 5];
        
        const handleCardClick = () => {
          window.location.href = `/blockchain/${store.nickname || store.address}`;
        };
        
        return (
          <div 
            className={`store-card relative rounded-xl overflow-hidden ${gradientClass} p-4 sm:p-6 text-white shadow-lg`}
            onClick={handleCardClick}
          >
            {/* Status indicator - three states: online, offline, pending */}
            <div className="absolute top-4 right-4">
              {(() => {
                if (!store.hasData) {
                  // No data ever - Being Installed
                  return (
                    <div className="flex items-center gap-1 bg-yellow-500/20 backdrop-blur px-2 py-1 rounded-full">
                      <span className="w-2 h-2 bg-yellow-400 rounded-full"></span>
                      <span className="text-xs font-medium">Pending</span>
                    </div>
                  );
                }
                
                const now = Date.now() / 1000;
                const offlineThreshold = 1 * 60 * 60; // 1 hour
                const isOffline = (now - store.lastDataTimestamp) >= offlineThreshold;
                
                if (isOffline) {
                  // Has data but old - Offline
                  return (
                    <div className="flex items-center gap-1 bg-red-500/20 backdrop-blur px-2 py-1 rounded-full">
                      <span className="w-2 h-2 bg-red-400 rounded-full"></span>
                      <span className="text-xs font-medium">Offline</span>
                    </div>
                  );
                } else {
                  // Has recent data - Active
                  return (
                    <div className="flex items-center gap-1 bg-green-500/20 backdrop-blur px-2 py-1 rounded-full">
                      <span className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
                      <span className="text-xs font-medium">Active</span>
                    </div>
                  );
                }
              })()}
            </div>
            
            <div className="relative z-10">
              <h3 className="text-lg font-bold mb-2 cursor-pointer sm:text-xl break-all pr-20">
                {store.nickname || 'Unnamed Store'}
              </h3>
              
              <p className="text-white/80 text-xs sm:text-sm mb-4 cursor-pointer line-clamp-2" title={store.description}>
                {store.description || 'No description available'}
              </p>
              
              <div className="flex flex-wrap gap-2 text-xs sm:gap-4 sm:text-sm cursor-pointer">
                <span>{store.fieldCount || 0} fields</span>
                <span>{store.signerCount || 0} signers</span>
              </div>
              
              <div className="mt-auto pt-4 flex gap-2">
                <a 
                  href={`/blockchain/${store.nickname || store.address}`}
                  className="card-link bg-white/10 backdrop-blur text-white/80 hover:bg-white/20 hover:text-white border border-white/20 font-medium flex-1 text-center transition-all duration-200"
                  onClick={(e) => e.stopPropagation()}
                >
                  View Data
                </a>
                <a 
                  href={`${CONTRACTS[store.chainId].EXPLORER_URL}/address/${store.address}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="card-link bg-white/10 backdrop-blur text-white/80 hover:bg-white/20 hover:text-white border border-white/20 font-medium flex-1 text-center transition-all duration-200"
                  onClick={(e) => e.stopPropagation()}
                >
                  Explorer
                </a>
              </div>
            </div>
          </div>
        );
      };
      
      // Loading Skeleton
      const LoadingSkeleton = () => (
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
          {[...Array(12)].map((_, i) => (
            <div key={i} className="rounded-xl bg-white border border-gray-300 p-6 shadow-sm">
              <div className="skeleton h-6 w-3/4 rounded mb-2"></div>
              <div className="skeleton h-4 w-full rounded mb-4"></div>
              <div className="skeleton h-4 w-1/2 rounded"></div>
            </div>
          ))}
        </div>
      );
      
      // Main App Component
      const StoresApp = () => {
        const [chainId, setChainId] = useState(8899);
        const [stores, setStores] = useState([]);
        const [loading, setLoading] = useState(true);
        const [error, setError] = useState(null);
        const [totalStores, setTotalStores] = useState(0);
        const [sortOrder, setSortOrder] = useState('oldest'); // 'newest' or 'oldest' - default to oldest first
        
        // Fetch all stores using multicall
        const fetchStores = async () => {
          setLoading(true);
          setError(null);
          
          try {
            const chain = getChainById(chainId);
            const publicClient = createPublicClient({
              chain,
              transport: http()
            });
            
            const factoryAddress = CONTRACTS[chainId].DEPLOYER_ADDRESS;
            
            // First, try to get total store count
            let storeCount = 0;
            try {
              storeCount = await publicClient.readContract({
                address: factoryAddress,
                abi: DEPLOYER_ABI,
                functionName: 'getAllStoresCount'
              });
              setTotalStores(Number(storeCount));
            } catch (err) {
              console.error('Could not fetch store count:', err);
              throw err;
            }
            
            if (Number(storeCount) === 0) {
              setStores([]);
              setLoading(false);
              return;
            }
            
            const totalCount = Number(storeCount);
            
            // Target owner address for filtering stores
            const TARGET_OWNER = '0x943E41e4cc22f971284ae957A380D3DbeA1Dc481';
            
            console.log('Fetching all stores:', {
              totalStores: totalCount,
              sortOrder
            });
            
            // Get ALL stores at once
            const storeAddresses = await publicClient.readContract({
              address: factoryAddress,
              abi: DEPLOYER_ABI,
              functionName: 'getStoresReverse',
              args: [BigInt(0), BigInt(totalCount)]
            });
            
            if (!storeAddresses || storeAddresses.length === 0) {
              setStores([]);
              setLoading(false);
              return;
            }
            
            // Prepare multicall for store info
            const calls = [];
            storeAddresses.forEach(address => {
              // Get store info from factory
              calls.push({
                target: factoryAddress,
                abi: DEPLOYER_ABI,
                functionName: 'getStoreInfo',
                args: [address]
              });
              
              // Get fields from store
              calls.push({
                target: address,
                abi: STORE_ABI,
                functionName: 'getAllFields'
              });
              
              // Get signer count from store
              calls.push({
                target: address,
                abi: STORE_ABI,
                functionName: 'authorizedSignerCount'
              });
              
              // Get last data timestamp (0 = no data)
              calls.push({
                target: address,
                abi: STORE_ABI,
                functionName: 'lastDataTimestamp'
              });
            });
            
            // Execute multicall
            const results = await simpleMulticall(publicClient, calls);

            // Process results - now with 4 results per store
            const processedStores = [];
            for (let i = 0; i < storeAddresses.length; i++) {
              const infoResult = results[i * 4] ?? { success: false, data: null };
              const fieldsResult = results[i * 4 + 1] ?? { success: false, data: [] };
              const signerCountResult = results[i * 4 + 2] ?? { success: false, data: 0n };
              const timestampResult = results[i * 4 + 3] ?? { success: false, data: 0n };

              const infoData = Array.isArray(infoResult.data) ? infoResult.data : [];
              const nickname = infoData[0] || 'Unknown';
              const owner = infoData[1] || null;
              const signerCountFromFactory = infoData[2] !== undefined ? Number(infoData[2]) : null;
              const deployedBlockFromFactory = infoData[3] !== undefined ? Number(infoData[3]) : null;
              const description = infoData[4] || '';
              const lastDataTimestampFromFactory = infoData[5] !== undefined ? Number(infoData[5]) : null;
              const hasDataFlag = infoData[6] !== undefined ? Boolean(infoData[6]) : null;

              const lastDataTimestamp = timestampResult.success ? Number(timestampResult.data) : (lastDataTimestampFromFactory || 0);
              const signerCount = signerCountResult.success
                ? Number(signerCountResult.data)
                : (signerCountFromFactory ?? 0);

              processedStores.push({
                address: storeAddresses[i],
                chainId,
                nickname,
                owner,
                description,
                fieldCount: fieldsResult.success ? fieldsResult.data.length : 0,
                signerCount,
                hasData: hasDataFlag !== null ? hasDataFlag : lastDataTimestamp > 0,
                lastDataTimestamp,
                deployedBlock: deployedBlockFromFactory ?? 0,
                // Store index in the factory array
                factoryIndex: i
              });
            }
            
            // Filter stores by target owner address
            const filteredStores = processedStores.filter(store => 
              store.owner?.toLowerCase() === TARGET_OWNER.toLowerCase()
            );
            
            console.log('Filtered stores:', {
              originalCount: processedStores.length,
              filteredCount: filteredStores.length,
              targetOwner: TARGET_OWNER
            });
            
            // Sort based on user preference
            if (sortOrder === 'oldest') {
              // For oldest first, lower index comes first
              filteredStores.sort((a, b) => a.factoryIndex - b.factoryIndex);
            } else {
              // For newest first, higher index comes first
              filteredStores.sort((a, b) => b.factoryIndex - a.factoryIndex);
            }
            
            // Set filtered stores
            setStores(filteredStores);
          } catch (err) {
            console.error('Error fetching stores:', err);
            setError(err.message);
          } finally {
            setLoading(false);
          }
        };
        
        // Fetch stores on mount, chain change, or sort change
        useEffect(() => {
          fetchStores();
        }, [chainId, sortOrder]);
        
        return (
          <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 sm:py-8 lg:px-8">
            {/* Header */}
            <div className="mb-6 sm:mb-8">
              <h1 className="text-2xl font-bold text-gray-900 mb-2 sm:text-3xl">IoT Sensor Stores</h1>
              <p className="text-sm text-gray-700 sm:text-base">Browse all deployed sensor data stores</p>
            </div>
            
            {/* Controls */}
            <div className="flex flex-col gap-4 mb-6 sm:flex-row sm:items-center sm:justify-between">
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
                <select
                  value={chainId}
                  onChange={(e) => setChainId(Number(e.target.value))}
                  className="select-modern w-full sm:w-auto"
                >
                  <option value={8899}>JIBCHAIN L1</option>
                  <option value={700011}>SiChang</option>
                  <option value={31337}>Anvil Local</option>
                </select>
                
                <select
                  value={sortOrder}
                  onChange={(e) => {
                    setSortOrder(e.target.value);
                    fetchStores(); // Refresh with new sort
                  }}
                  className="select-modern w-full sm:w-auto"
                >
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                </select>
                
                {totalStores > 0 && (
                  <span className="text-gray-700 font-medium">
                    Showing {stores.length} of {totalStores} stores
                  </span>
                )}
              </div>
              
              <button
                onClick={fetchStores}
                disabled={loading}
                className="btn btn-primary w-full sm:w-auto"
              >
                {loading ? 'Loading...' : 'Refresh'}
              </button>
            </div>
            
            {/* Error State */}
            {error && (
              <div className="bg-red-50 border border-red-300 text-red-800 px-4 py-3 rounded-lg mb-6 font-medium">
                Error: {error}
              </div>
            )}
            
            {/* Content */}
            {loading ? (
              <LoadingSkeleton />
            ) : stores.length > 0 ? (
              <>
                {/* Group stores by installation status - four states */}
                {(() => {
                  // Lab testing detection function
                  const isLabTesting = (description) => {
                    if (!description) return false;
                    const labKeywords = ['university', 'lab', 'laboratory', 'research', 'testing', 'campus', 'institute', 'college', 'academic'];
                    return labKeywords.some(keyword => description.toLowerCase().includes(keyword));
                  };
                  
                  // Four-state detection: installed, lab testing (all lab sensors), offline (non-lab only), being installed
                  const now = Date.now() / 1000; // Current timestamp in seconds
                  const offlineThreshold = 1 * 60 * 60; // 1 hour in seconds
                  
                  // Lab Testing: ALL lab sensors regardless of status (active or offline)
                  const labTestingStores = stores.filter(s => 
                    s.hasData && isLabTesting(s.description)
                  );
                  
                  // Installed: Active non-lab sensors only
                  const installedStores = stores.filter(s => 
                    s.hasData && 
                    (now - s.lastDataTimestamp) < offlineThreshold && 
                    !isLabTesting(s.description)
                  );
                  
                  // Offline: Offline non-lab sensors only (exclude lab sensors)
                  const offlineStores = stores.filter(s => 
                    s.hasData && 
                    (now - s.lastDataTimestamp) >= offlineThreshold &&
                    !isLabTesting(s.description)
                  );
                  
                  // Being Installed: Non-lab sensors with no data
                  const beingInstalledStores = stores.filter(s => 
                    !s.hasData && !isLabTesting(s.description)
                  );
                  
                  // Sort all groups by nickname (ascending: FloodBoy001, FloodBoy002, etc.)
                  const sortByNickname = (a, b) => {
                    // Extract number from nickname (e.g., "FloodBoy080" -> 80)
                    const getNumber = (store) => {
                      if (!store.nickname || store.nickname === 'Unknown') return 999999;
                      const match = store.nickname.match(/FloodBoy(\d+)/);
                      return match ? parseInt(match[1], 10) : 999999;
                    };
                    return getNumber(a) - getNumber(b);
                  };
                  
                  // Special sorting for Lab Testing: Active sensors first, then offline sensors, then by nickname within each group
                  const sortLabTesting = (a, b) => {
                    const now = Date.now() / 1000;
                    const offlineThreshold = 1 * 60 * 60; // 1 hour
                    
                    const aIsActive = (now - a.lastDataTimestamp) < offlineThreshold;
                    const bIsActive = (now - b.lastDataTimestamp) < offlineThreshold;
                    
                    // If different status, active comes first
                    if (aIsActive !== bIsActive) {
                      return bIsActive - aIsActive; // Active (true) sorts before offline (false)
                    }
                    
                    // Same status, sort by nickname
                    const getNumber = (store) => {
                      if (!store.nickname || store.nickname === 'Unknown') return 999999;
                      const match = store.nickname.match(/FloodBoy(\d+)/);
                      return match ? parseInt(match[1], 10) : 999999;
                    };
                    return getNumber(a) - getNumber(b);
                  };
                  
                  labTestingStores.sort(sortLabTesting);
                  installedStores.sort(sortByNickname);
                  offlineStores.sort(sortByNickname);
                  beingInstalledStores.sort(sortByNickname);
                  
                  return (
                    <>
                      {/* Installed Sensors Section */}
                      {installedStores.length > 0 && (
                        <div className="mb-8">
                          <h2 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-900">
                            <span className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
                            Installed Sensors ({installedStores.length})
                          </h2>
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {installedStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={index} />
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {/* Lab Testing Section */}
                      {labTestingStores.length > 0 && (
                        <div className="mb-8">
                          <h2 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-900">
                            <span className="w-3 h-3 bg-purple-500 rounded-full"></span>
                            Lab Testing ({labTestingStores.length})
                          </h2>
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {labTestingStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={installedStores.length + index} />
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {/* Offline Sensors Section */}
                      {offlineStores.length > 0 && (
                        <div className="mb-8">
                          <h2 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-900">
                            <span className="w-3 h-3 bg-red-500 rounded-full"></span>
                            Offline Sensors ({offlineStores.length})
                          </h2>
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {offlineStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={installedStores.length + labTestingStores.length + index} />
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {/* Being Installed Section */}
                      {beingInstalledStores.length > 0 && (
                        <div>
                          <h2 className="text-xl font-bold mb-4 flex items-center gap-2 text-gray-900">
                            <span className="w-3 h-3 bg-yellow-500 rounded-full"></span>
                            Being Installed ({beingInstalledStores.length})
                          </h2>
                          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
                            {beingInstalledStores.map((store, index) => (
                              <StoreCard key={store.address} store={store} index={installedStores.length + labTestingStores.length + offlineStores.length + index} />
                            ))}
                          </div>
                        </div>
                      )}
                    </>
                  );
                })()}
              </>
            ) : (
              <div className="text-center py-8 sm:py-12">
                <p className="text-gray-700 text-base sm:text-lg font-medium">No stores deployed on {getChainById(chainId).name} yet</p>
                <p className="text-gray-600 mt-2">Deploy your first store to get started</p>
              </div>
            )}
          </div>
        );
      };
      
      // Render the app
      ReactDOM.render(<StoresApp />, document.getElementById('stores-app'));
    </script>
  </body>
</html>
