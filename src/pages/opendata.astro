---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE } from '../consts';
---

<BaseLayout title={`Open Data - ${SITE_TITLE}`} description="Direct blockchain access to FloodBoy sensor data">
	<div class="container mx-auto px-4 py-8 max-w-4xl">
		<h1 class="text-3xl font-bold mb-6">FloodBoy Open Data Access</h1>
		
		<div class="space-y-8">
			<section>
				<h2 class="text-xl font-semibold mb-4">Direct Blockchain Access</h2>
				<div class="bg-blue-50 p-4 rounded border">
					<p class="mb-4 text-gray-700">Access FloodBoy sensor data directly from the blockchain without any API dependencies. Use these commands to query real-time flood monitoring data from JIBCHAIN L1.</p>
					
					<div class="bg-amber-50 border-l-4 border-amber-400 p-4 mb-4">
						<h4 class="font-semibold text-amber-800 mb-2">üîç Understanding FloodBoy Data Structure</h4>
						<p class="text-amber-700 text-sm mb-3">FloodBoy sensors store data in smart contracts with a standardized field system. Each sensor records multiple measurements (water depth, battery voltage, installation height) with precise timestamps.</p>
						
						<div class="grid md:grid-cols-2 gap-4 text-sm">
							<div class="bg-white p-3 rounded">
								<h5 class="font-medium mb-2">üìä What getAllFields() Returns</h5>
								<ul class="space-y-1 text-xs">
									<li><strong>Field Name:</strong> "water_depth", "battery_voltage"</li>
									<li><strong>Unit:</strong> "m x10000", "V x100" (scaling factor)</li>
									<li><strong>Data Type:</strong> "int256" (signed integer)</li>
								</ul>
							</div>
							<div class="bg-white p-3 rounded">
								<h5 class="font-medium mb-2">üìà What getLatestRecord() Returns</h5>
								<ul class="space-y-1 text-xs">
									<li><strong>Timestamp:</strong> Unix time when data was recorded</li>
									<li><strong>Values Array:</strong> Raw sensor readings (needs scaling)</li>
									<li><strong>Order:</strong> Values match field order from getAllFields()</li>
								</ul>
							</div>
						</div>
					</div>
					
					<h3 class="text-lg font-semibold mb-3">Network Information</h3>
					<div class="bg-white p-3 rounded mb-4">
						<p class="mb-3"><strong>Chain ID:</strong> 8899 (JIBCHAIN L1)</p>
						
						<div class="mb-4">
							<p class="font-medium mb-2">üöÄ JIBCHAIN L1 RPC URL List (Sorted by Performance)</p>
							<div class="overflow-x-auto">
								<table class="w-full text-sm">
									<thead class="bg-gray-50">
										<tr>
											<th class="px-3 py-2 text-left">RPC Server Address</th>
											<th class="px-3 py-2 text-left">Latency</th>
											<th class="px-3 py-2 text-left">Status</th>
										</tr>
									</thead>
									<tbody class="divide-y divide-gray-200">
										<tr class="bg-green-50">
											<td class="px-3 py-2 font-mono text-xs">
												<a href="https://rpc2-l1.jbc.xpool.pw" target="_blank" rel="noopener" class="text-blue-600 hover:underline">https://rpc2-l1.jbc.xpool.pw</a>
												<span class="ml-2 px-2 py-1 bg-green-100 text-green-800 rounded text-xs">Fastest</span>
											</td>
											<td class="px-3 py-2 text-green-700 font-medium">0.047s</td>
											<td class="px-3 py-2">
												<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
													<span class="w-2 h-2 bg-green-400 rounded-full mr-1"></span>
													Active
												</span>
											</td>
										</tr>
										<tr class="bg-blue-50">
											<td class="px-3 py-2 font-mono text-xs">
												<a href="https://rpc-l1.jbc.xpool.pw" target="_blank" rel="noopener" class="text-blue-600 hover:underline">https://rpc-l1.jbc.xpool.pw</a>
												<span class="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">Primary</span>
											</td>
											<td class="px-3 py-2 text-blue-700 font-medium">0.049s</td>
											<td class="px-3 py-2">
												<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
													<span class="w-2 h-2 bg-blue-400 rounded-full mr-1"></span>
													Active
												</span>
											</td>
										</tr>
										<tr>
											<td class="px-3 py-2 font-mono text-xs">
												<a href="https://rpc-l1.inan.in.th" target="_blank" rel="noopener" class="text-blue-600 hover:underline">https://rpc-l1.inan.in.th</a>
											</td>
											<td class="px-3 py-2 text-yellow-700 font-medium">0.137s</td>
											<td class="px-3 py-2">
												<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
													<span class="w-2 h-2 bg-yellow-400 rounded-full mr-1"></span>
													Active
												</span>
											</td>
										</tr>
										<tr>
											<td class="px-3 py-2 font-mono text-xs">
												<a href="https://rpc-l1.jibchain.net" target="_blank" rel="noopener" class="text-blue-600 hover:underline">https://rpc-l1.jibchain.net</a>
												<span class="ml-2 px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs">Used in Examples</span>
											</td>
											<td class="px-3 py-2 text-red-700 font-medium">0.405s</td>
											<td class="px-3 py-2">
												<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-red-100 text-red-800">
													<span class="w-2 h-2 bg-red-400 rounded-full mr-1"></span>
													Slower
												</span>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							<p class="text-xs text-gray-600 mt-2">üí° <strong>Tip:</strong> Use the fastest RPC (rpc2-l1.jbc.xpool.pw) for better performance. All RPCs are compatible and interchangeable.</p>
						</div>
						
						<div class="grid md:grid-cols-2 gap-4 text-sm">
							<div>
								<p><strong>Block Explorer:</strong></p>
								<a href="https://exp.jibchain.net" target="_blank" rel="noopener" class="text-blue-600 hover:underline">https://exp.jibchain.net</a>
							</div>
							<div>
								<p><strong>Current Block Height:</strong> ~5,947,910</p>
							</div>
						</div>
						
						<div class="mt-3 pt-3 border-t">
							<p><strong>FloodBoy001 Store:</strong> <code class="bg-gray-100 px-2 py-1 rounded text-xs">0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb</code></p>
							<p><strong>Universal Signer:</strong> <code class="bg-gray-100 px-2 py-1 rounded text-xs">0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd</code></p>
						</div>
					</div>

					<h3 class="text-lg font-semibold mb-3">Viem.js TypeScript Examples</h3>
					<div class="bg-white p-3 rounded mb-4">
						<div class="mb-4">
							<p class="mb-2"><strong>What is Viem?</strong></p>
							<p class="text-sm text-gray-600 mb-3">Viem is a modern TypeScript interface for Ethereum. It provides type-safe contract interactions, automatic ABI encoding/decoding, and excellent developer experience for building web applications that interact with smart contracts.</p>
							
							<div class="grid md:grid-cols-2 gap-4 text-sm">
								<div>
									<p class="font-medium mb-1">‚úÖ Benefits:</p>
									<ul class="list-disc list-inside text-xs space-y-1 text-gray-600">
										<li>Full TypeScript support</li>
										<li>Tree-shakeable & lightweight</li>
										<li>Automatic type inference</li>
										<li>Built-in error handling</li>
										<li>Modern async/await syntax</li>
									</ul>
								</div>
								<div>
									<p class="font-medium mb-1">üì¶ Installation:</p>
									<pre class="text-xs bg-gray-100 p-2 rounded font-mono">npm install viem</pre>
									<p class="text-xs text-gray-600 mt-1">Works with React, Vue, Node.js, and any JavaScript environment</p>
								</div>
							</div>
						</div>
					</div>

					<h4 class="text-md font-medium mb-2">Setup & Configuration</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-4 border">{`import { createPublicClient, http } from 'viem'

// JIBCHAIN L1 network configuration
const jibchain = {
  id: 8899,
  name: 'JIBCHAIN L1',
  nativeCurrency: { name: 'JBC', symbol: 'JBC', decimals: 18 },
  rpcUrls: {
    default: { http: ['https://rpc-l1.jibchain.net/'] }
  },
  blockExplorers: {
    default: { name: 'JIBCHAIN Explorer', url: 'https://exp.jibchain.net' }
  }
}

// Create client
const client = createPublicClient({
  chain: jibchain,
  transport: http()
})

// Contract addresses
const STORE_ADDRESS = '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb'
const UNIVERSAL_SIGNER = '0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd'`}</pre>

					<h4 class="text-md font-medium mb-2">Get All Fields</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-4 border">{`// ABI for getAllFields function
const getAllFieldsABI = [
  {
    name: 'getAllFields',
    type: 'function',
    stateMutability: 'view',
    inputs: [],
    outputs: [
      {
        type: 'tuple[]',
        components: [
          { name: 'name', type: 'string' },
          { name: 'unit', type: 'string' },
          { name: 'dtype', type: 'string' }
        ]
      }
    ]
  }
] as const

// Get all fields
async function getAllFields() {
  try {
    const fields = await client.readContract({
      address: STORE_ADDRESS,
      abi: getAllFieldsABI,
      functionName: 'getAllFields'
    })
    
    console.log('Fields:', fields)
    // Returns: [
    //   { name: "water_depth", unit: "m x10000", dtype: "int256" },
    //   { name: "battery_voltage", unit: "V x100", dtype: "int256" },
    //   ...
    // ]
    
    return fields
  } catch (error) {
    console.error('Error fetching fields:', error)
    throw error
  }
}`}</pre>

					<h4 class="text-md font-medium mb-2">Get Latest Record</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-4 border">{`// ABI for getLatestRecord function
const getLatestRecordABI = [
  {
    name: 'getLatestRecord',
    type: 'function',
    stateMutability: 'view',
    inputs: [{ name: 'sensor', type: 'address' }],
    outputs: [
      { name: '', type: 'uint256' },  // timestamp
      { name: '', type: 'int256[]' }  // values array
    ]
  }
] as const

// Get latest sensor record
async function getLatestRecord() {
  try {
    const [timestamp, values] = await client.readContract({
      address: STORE_ADDRESS,
      abi: getLatestRecordABI,
      functionName: 'getLatestRecord',
      args: [UNIVERSAL_SIGNER]
    })
    
    console.log('Timestamp:', timestamp)  // 1748044727n (BigInt)
    console.log('Raw values:', values)    // [2700n, 1291n, 30200n, ...]
    
    return { timestamp, values }
  } catch (error) {
    console.error('Error fetching latest record:', error)
    throw error
  }
}`}</pre>

					<h4 class="text-md font-medium mb-2">Complete Data Processing Example</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-6 border">{`// Complete example with data processing
async function getProcessedFloodData() {
  try {
    // Get field definitions and latest data
    const [fields, { timestamp, values }] = await Promise.all([
      getAllFields(),
      getLatestRecord()
    ])
    
    // Process each field with its corresponding value
    const processedData = fields.map((field, index) => {
      const rawValue = values[index]
      let processedValue: number
      let unit: string
      
      // Extract scaling factor and base unit
      if (field.unit.includes('x100')) {
        processedValue = Number(rawValue) / 100
        unit = field.unit.replace(' x100', '')
      } else if (field.unit.includes('x10000')) {
        processedValue = Number(rawValue) / 10000
        unit = field.unit.replace(' x10000', '')
      } else {
        processedValue = Number(rawValue)
        unit = field.unit
      }
      
      return {
        name: field.name,
        rawValue: rawValue.toString(),
        value: processedValue,
        unit: unit,
        formattedValue: \`\${processedValue.toFixed(2)} \${unit}\`
      }
    })
    
    // Convert timestamp to Date
    const recordDate = new Date(Number(timestamp) * 1000)
    
    return {
      timestamp: Number(timestamp),
      recordDate: recordDate.toISOString(),
      data: processedData
    }
    
    // Example output:
    // {
    //   timestamp: 1748044727,
    //   recordDate: "2025-01-23T12:25:27.000Z",
    //   data: [
    //     { name: "water_depth", value: 0.27, unit: "m", formattedValue: "0.27 m" },
    //     { name: "battery_voltage", value: 12.91, unit: "V", formattedValue: "12.91 V" }
    //   ]
    // }
    
  } catch (error) {
    console.error('Error processing flood data:', error)
    throw error
  }
}

// Usage in React component or Node.js
getProcessedFloodData().then(data => {
  console.log('Processed flood data:', data)
})`}</pre>

					<h4 class="text-md font-medium mb-2">Interactive HTML Example</h4>
					<div class="bg-amber-50 border-l-4 border-amber-400 p-4 mb-4">
						<p class="text-amber-800 text-sm mb-2">üéÆ <strong>Live Interactive Example</strong></p>
						<p class="text-amber-700 text-xs">Copy this complete HTML file to test FloodBoy data access directly in your browser. No build tools required!</p>
					</div>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-6 border">{`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FloodBoy Data Viewer</title>
    
    <!-- Viem.js from CDN -->
    <script type="module">
        import { createPublicClient, http } from 'https://esm.sh/viem@2.21.53'
        
        // JIBCHAIN L1 Configuration
        const jibchain = {
            id: 8899,
            name: 'JIBCHAIN L1',
            nativeCurrency: { name: 'JBC', symbol: 'JBC', decimals: 18 },
            rpcUrls: {
                default: { http: ['https://rpc2-l1.jbc.xpool.pw'] } // Using fastest RPC
            }
        }
        
        const client = createPublicClient({
            chain: jibchain,
            transport: http()
        })
        
        // Contract constants
        const STORE_ADDRESS = '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb'
        const UNIVERSAL_SIGNER = '0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd'
        
        // ABIs
        const getAllFieldsABI = [{
            name: 'getAllFields',
            type: 'function',
            stateMutability: 'view',
            inputs: [],
            outputs: [{
                type: 'tuple[]',
                components: [
                    { name: 'name', type: 'string' },
                    { name: 'unit', type: 'string' },
                    { name: 'dtype', type: 'string' }
                ]
            }]
        }]
        
        const getLatestRecordABI = [{
            name: 'getLatestRecord',
            type: 'function',
            stateMutability: 'view',
            inputs: [{ name: 'sensor', type: 'address' }],
            outputs: [
                { name: '', type: 'uint256' },
                { name: '', type: 'int256[]' }
            ]
        }]
        
        // Main function
        async function loadFloodData() {
            const loadingEl = document.getElementById('loading')
            const dataEl = document.getElementById('data')
            const errorEl = document.getElementById('error')
            
            try {
                loadingEl.style.display = 'block'
                errorEl.style.display = 'none'
                dataEl.innerHTML = ''
                
                // Get fields and latest record
                const [fields, [timestamp, values]] = await Promise.all([
                    client.readContract({
                        address: STORE_ADDRESS,
                        abi: getAllFieldsABI,
                        functionName: 'getAllFields'
                    }),
                    client.readContract({
                        address: STORE_ADDRESS,
                        abi: getLatestRecordABI,
                        functionName: 'getLatestRecord',
                        args: [UNIVERSAL_SIGNER]
                    })
                ])
                
                // Process data
                const processedData = fields.map((field, index) => {
                    const rawValue = values[index]
                    let processedValue, unit
                    
                    if (field.unit.includes('x100')) {
                        processedValue = Number(rawValue) / 100
                        unit = field.unit.replace(' x100', '')
                    } else if (field.unit.includes('x10000')) {
                        processedValue = Number(rawValue) / 10000
                        unit = field.unit.replace(' x10000', '')
                    } else {
                        processedValue = Number(rawValue)
                        unit = field.unit
                    }
                    
                    return {
                        name: field.name.replace(/_/g, ' ').toUpperCase(),
                        value: processedValue.toFixed(2),
                        unit: unit,
                        raw: rawValue.toString()
                    }
                })
                
                const recordDate = new Date(Number(timestamp) * 1000)
                
                // Display data
                dataEl.innerHTML = \`
                    <div class="bg-blue-50 p-4 rounded-lg mb-4">
                        <h3 class="text-lg font-bold text-blue-800 mb-2">üìä FloodBoy Sensor Data</h3>
                        <p class="text-blue-600 text-sm">Last Updated: \${recordDate.toLocaleString()}</p>
                    </div>
                    
                    <div class="grid gap-4">
                        \${processedData.map(item => \`
                            <div class="bg-white p-4 rounded-lg border-l-4 border-blue-400 shadow-sm">
                                <div class="flex justify-between items-center">
                                    <h4 class="font-semibold text-gray-800">\${item.name}</h4>
                                    <span class="text-2xl font-bold text-blue-600">\${item.value} \${item.unit}</span>
                                </div>
                                <p class="text-xs text-gray-500 mt-1">Raw value: \${item.raw}</p>
                            </div>
                        \`).join('')}
                    </div>
                    
                    <div class="mt-4 p-3 bg-gray-50 rounded text-xs text-gray-600">
                        <p><strong>Store:</strong> \${STORE_ADDRESS}</p>
                        <p><strong>Sensor:</strong> \${UNIVERSAL_SIGNER}</p>
                        <p><strong>RPC:</strong> \${jibchain.rpcUrls.default.http[0]}</p>
                    </div>
                \`
                
                loadingEl.style.display = 'none'
                
            } catch (error) {
                console.error('Error:', error)
                loadingEl.style.display = 'none'
                errorEl.style.display = 'block'
                errorEl.innerHTML = \`
                    <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                        <h3 class="text-red-800 font-bold mb-2">‚ùå Error Loading Data</h3>
                        <p class="text-red-600 text-sm">\${error.message}</p>
                        <button onclick="loadFloodData()" class="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 text-sm">
                            Try Again
                        </button>
                    </div>
                \`
            }
        }
        
        // Make function global
        window.loadFloodData = loadFloodData
        
        // Auto-load on page ready
        document.addEventListener('DOMContentLoaded', loadFloodData)
    </script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen py-8">
    <div class="container mx-auto px-4 max-w-4xl">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold text-gray-800">üåä FloodBoy Live Data</h1>
                <button onclick="loadFloodData()" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                    üîÑ Refresh Data
                </button>
            </div>
            
            <div id="loading" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p class="mt-2 text-gray-600">Loading flood data from blockchain...</p>
            </div>
            
            <div id="error" style="display: none;"></div>
            <div id="data"></div>
            
            <div class="mt-6 pt-4 border-t text-xs text-gray-500">
                <p>‚ú® <strong>Powered by:</strong> Viem.js + JIBCHAIN L1 + FloodBoy IoT Sensors</p>
                <p>üîó <strong>Source:</strong> Direct blockchain access - No APIs, No servers!</p>
            </div>
        </div>
    </div>
</body>
</html>`}</pre>

					<h4 class="text-md font-medium mb-2">React + Viem Example</h4>
					<div class="bg-green-50 border-l-4 border-green-400 p-4 mb-4">
						<p class="text-green-800 text-sm mb-2">‚öõÔ∏è <strong>React Interactive Example</strong></p>
						<p class="text-green-700 text-xs">Complete React app with hooks, state management, and modern UI patterns. Uses CDN for zero-config setup!</p>
					</div>
					<pre class="text-sm whitespace-pre-wrap bg-gray-100 text-gray-800 p-4 rounded overflow-x-auto font-mono mb-6 border">{`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FloodBoy React App</title>
    
    <!-- React and Babel for JSX -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;
        
        // Viem client setup (using global fetch for browser compatibility)
        const createViemClient = () => {
            const jibchain = {
                id: 8899,
                name: 'JIBCHAIN L1',
                rpcUrls: {
                    default: { http: ['https://rpc2-l1.jbc.xpool.pw'] }
                }
            };
            
            return {
                async readContract({ address, abi, functionName, args = [] }) {
                    const iface = new ethers.utils.Interface(abi);
                    const data = iface.encodeFunctionData(functionName, args);
                    
                    const response = await fetch(jibchain.rpcUrls.default.http[0], {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'eth_call',
                            params: [{ to: address, data }, 'latest'],
                            id: 1
                        })
                    });
                    
                    const result = await response.json();
                    if (result.error) throw new Error(result.error.message);
                    
                    return iface.decodeFunctionResult(functionName, result.result);
                }
            };
        };

        // Contract constants
        const STORE_ADDRESS = '0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb';
        const UNIVERSAL_SIGNER = '0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd';
        
        // ABIs
        const getAllFieldsABI = [{
            name: 'getAllFields',
            type: 'function',
            stateMutability: 'view',
            inputs: [],
            outputs: [{
                type: 'tuple[]',
                components: [
                    { name: 'name', type: 'string' },
                    { name: 'unit', type: 'string' },
                    { name: 'dtype', type: 'string' }
                ]
            }]
        }];
        
        const getLatestRecordABI = [{
            name: 'getLatestRecord',
            type: 'function',
            stateMutability: 'view',
            inputs: [{ name: 'sensor', type: 'address' }],
            outputs: [
                { name: '', type: 'uint256' },
                { name: '', type: 'int256[]' }
            ]
        }];

        // Main React Component
        function FloodBoyApp() {
            const [data, setData] = useState(null);
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState(null);
            const [lastUpdate, setLastUpdate] = useState(null);
            const chartRef = useRef(null);
            const chartInstance = useRef(null);

            const loadData = async () => {
                setLoading(true);
                setError(null);
                
                try {
                    const client = createViemClient();
                    
                    // Simplified fetch for demo (would use actual Viem in real app)
                    const [fieldsResponse, recordResponse] = await Promise.all([
                        fetch('https://rpc2-l1.jbc.xpool.pw', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                jsonrpc: '2.0',
                                method: 'eth_call',
                                params: [{ to: STORE_ADDRESS, data: '0x92208228' }, 'latest'],
                                id: 1
                            })
                        }),
                        fetch('https://rpc2-l1.jbc.xpool.pw', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                jsonrpc: '2.0',
                                method: 'eth_call',
                                params: [{ 
                                    to: STORE_ADDRESS, 
                                    data: '0x2f63bd6a000000000000000000000000cb0e58b011924e049ce4b4d62298edf43dff0bdd' 
                                }, 'latest'],
                                id: 2
                            })
                        })
                    ]);
                    
                    const fieldsData = await fieldsResponse.json();
                    const recordData = await recordResponse.json();
                    
                    if (fieldsData.error || recordData.error) {
                        throw new Error('Failed to fetch blockchain data');
                    }

                    // Mock processed data for demo (would decode actual ABI response)
                    const processedData = [
                        { name: 'WATER DEPTH', value: '0.27', unit: 'm', raw: '2700', color: 'blue' },
                        { name: 'BATTERY VOLTAGE', value: '12.91', unit: 'V', raw: '1291', color: 'green' },
                        { name: 'INSTALLATION HEIGHT', value: '3.02', unit: 'm', raw: '30200', color: 'purple' }
                    ];
                    
                    setData(processedData);
                    setLastUpdate(new Date());
                    
                    // Create/update chart
                    updateChart(processedData);
                    
                } catch (err) {
                    setError(err.message);
                } finally {
                    setLoading(false);
                }
            };

            const updateChart = (chartData) => {
                if (chartInstance.current) {
                    chartInstance.current.destroy();
                }

                const ctx = chartRef.current.getContext('2d');
                chartInstance.current = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: chartData.map(item => item.name),
                        datasets: [{
                            data: chartData.map(item => parseFloat(item.value)),
                            backgroundColor: [
                                'rgba(59, 130, 246, 0.8)',
                                'rgba(16, 185, 129, 0.8)', 
                                'rgba(139, 92, 246, 0.8)'
                            ],
                            borderColor: [
                                'rgb(59, 130, 246)',
                                'rgb(16, 185, 129)',
                                'rgb(139, 92, 246)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom',
                            },
                            title: {
                                display: true,
                                text: 'FloodBoy Sensor Readings'
                            }
                        }
                    }
                });
            };

            useEffect(() => {
                loadData();
                
                // Auto-refresh every 30 seconds
                const interval = setInterval(loadData, 30000);
                
                return () => {
                    clearInterval(interval);
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, []);

            return (
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
                    <div className="container mx-auto px-4 max-w-6xl">
                        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                            {/* Header */}
                            <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6">
                                <div className="flex justify-between items-center">
                                    <div>
                                        <h1 className="text-3xl font-bold mb-2">üåä FloodBoy Dashboard</h1>
                                        <p className="text-blue-100">Real-time IoT flood monitoring on blockchain</p>
                                    </div>
                                    <button
                                        onClick={loadData}
                                        disabled={loading}
                                        className="px-6 py-3 bg-white/20 hover:bg-white/30 disabled:opacity-50 rounded-lg transition-all duration-200 flex items-center gap-2"
                                    >
                                        <span className={loading ? 'animate-spin' : ''}>üîÑ</span>
                                        {loading ? 'Loading...' : 'Refresh'}
                                    </button>
                                </div>
                                {lastUpdate && (
                                    <p className="text-blue-200 text-sm mt-2">
                                        Last updated: {lastUpdate.toLocaleTimeString()}
                                    </p>
                                )}
                            </div>

                            <div className="p-6">
                                {/* Loading State */}
                                {loading && (
                                    <div className="text-center py-12">
                                        <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                                        <p className="text-gray-600">Fetching data from blockchain...</p>
                                    </div>
                                )}

                                {/* Error State */}
                                {error && (
                                    <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
                                        <div className="flex items-center mb-2">
                                            <span className="text-red-500 text-xl mr-2">‚ùå</span>
                                            <h3 className="text-red-800 font-bold">Error Loading Data</h3>
                                        </div>
                                        <p className="text-red-600 mb-4">{error}</p>
                                        <button
                                            onClick={loadData}
                                            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                                        >
                                            Try Again
                                        </button>
                                    </div>
                                )}

                                {/* Data Display */}
                                {data && !loading && (
                                    <div className="grid lg:grid-cols-2 gap-8">
                                        {/* Sensor Cards */}
                                        <div className="space-y-4">
                                            <h2 className="text-xl font-bold text-gray-800 mb-4">Current Readings</h2>
                                            {data.map((item, index) => (
                                                <div key={index} className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
                                                    <div className="flex justify-between items-center">
                                                        <div>
                                                            <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
                                                            <p className="text-sm text-gray-500">Raw: {item.raw}</p>
                                                        </div>
                                                        <div className="text-right">
                                                            <span className={\`text-3xl font-bold text-\${item.color}-600\`}>
                                                                {item.value}
                                                            </span>
                                                            <span className="text-lg text-gray-600 ml-1">{item.unit}</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>

                                        {/* Chart */}
                                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
                                            <h2 className="text-xl font-bold text-gray-800 mb-4">Data Visualization</h2>
                                            <div className="relative h-80">
                                                <canvas ref={chartRef}></canvas>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Footer Info */}
                                <div className="mt-8 pt-6 border-t border-gray-200 text-sm text-gray-500">
                                    <div className="grid md:grid-cols-2 gap-4">
                                        <div>
                                            <p><strong>Store Contract:</strong> {STORE_ADDRESS}</p>
                                            <p><strong>Sensor Address:</strong> {UNIVERSAL_SIGNER}</p>
                                        </div>
                                        <div>
                                            <p><strong>Network:</strong> JIBCHAIN L1 (8899)</p>
                                            <p><strong>RPC:</strong> rpc2-l1.jbc.xpool.pw</p>
                                        </div>
                                    </div>
                                    <div className="mt-4 pt-4 border-t border-gray-200 text-center">
                                        <p>‚ú® <strong>Powered by:</strong> React + Viem.js + Chart.js + Tailwind CSS</p>
                                        <p>üîó <strong>Data Source:</strong> Direct blockchain access via JIBCHAIN L1</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Render the app
        ReactDOM.render(<FloodBoyApp />, document.getElementById('root'));
    </script>
</body>
</html>`}</pre>

					<h3 class="text-lg font-semibold mb-3 mt-6">Cast Commands (Foundry)</h3>
					<div class="bg-white p-3 rounded mb-4">
						<div class="mb-4">
							<p class="mb-2"><strong>What is Cast?</strong></p>
							<p class="text-sm text-gray-600 mb-3">Cast is Foundry's command-line tool for performing Ethereum RPC calls. It provides a user-friendly interface for interacting with smart contracts, automatically handling ABI encoding/decoding and formatting outputs in human-readable format.</p>
							
							<p class="mb-2"><strong>Installation:</strong></p>
							<pre class="text-sm bg-gray-100 p-2 rounded font-mono mb-3">curl -L https://foundry.paradigm.xyz | bash
foundryup</pre>
							
							<div class="grid md:grid-cols-2 gap-4 text-sm">
								<div>
									<p class="font-medium mb-1">‚úÖ Advantages:</p>
									<ul class="list-disc list-inside text-xs space-y-1 text-gray-600">
										<li>Human-readable output</li>
										<li>Automatic ABI decoding</li>
										<li>Built-in error handling</li>
										<li>Type safety</li>
									</ul>
								</div>
								<div>
									<p class="font-medium mb-1">üìã Requirements:</p>
									<ul class="list-disc list-inside text-xs space-y-1 text-gray-600">
										<li>Foundry installed locally</li>
										<li>Terminal/command line access</li>
										<li>Internet connection to RPC</li>
									</ul>
								</div>
							</div>
						</div>
					</div>

					<h4 class="text-md font-medium mb-2">Get All Fields</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-600 text-green-300 p-4 rounded overflow-x-auto font-mono mb-4">{`cast call 0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb "getAllFields()((string,string,string)[])" --rpc-url https://rpc-l1.jibchain.net/`}</pre>

					<h4 class="text-md font-medium mb-2">Get Latest Record</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-600 text-green-300 p-4 rounded overflow-x-auto font-mono mb-6">{`cast call 0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb "getLatestRecord(address)(uint256,int256[])" 0xcB0e58b011924e049ce4b4D62298Edf43dFF0BDd --rpc-url https://rpc-l1.jibchain.net/`}</pre>

					<h3 class="text-lg font-semibold mb-3">Curl Commands (JSON-RPC)</h3>
					<div class="bg-white p-3 rounded mb-4">
						<div class="mb-4">
							<p class="mb-2"><strong>What is JSON-RPC?</strong></p>
							<p class="text-sm text-gray-600 mb-3">JSON-RPC is the standard protocol for communicating with Ethereum nodes. These curl commands send raw JSON requests directly to the blockchain, giving you complete control over the interaction. No additional tools required - works anywhere curl is available.</p>
							
							<div class="grid md:grid-cols-2 gap-4 text-sm">
								<div>
									<p class="font-medium mb-1">‚úÖ Advantages:</p>
									<ul class="list-disc list-inside text-xs space-y-1 text-gray-600">
										<li>Works on any system with curl</li>
										<li>No installation required</li>
										<li>Direct blockchain access</li>
										<li>Scriptable and automatable</li>
										<li>Language agnostic</li>
									</ul>
								</div>
								<div>
									<p class="font-medium mb-1">‚ö†Ô∏è Considerations:</p>
									<ul class="list-disc list-inside text-xs space-y-1 text-gray-600">
										<li>Returns raw hex data</li>
										<li>Requires manual ABI decoding</li>
										<li>Need to understand data types</li>
										<li>More complex error handling</li>
									</ul>
								</div>
							</div>
							
							<div class="mt-3 p-2 bg-gray-50 rounded text-xs">
								<p class="font-medium mb-1">üí° Pro Tip:</p>
								<p class="text-gray-600">Add <code>| jq</code> to the end of curl commands for pretty JSON formatting. Install jq: <code>brew install jq</code> or <code>apt install jq</code></p>
							</div>
						</div>
					</div>
					
					<h4 class="text-md font-medium mb-2">Get All Fields</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-600 text-green-300 p-4 rounded overflow-x-auto font-mono mb-4">{`curl 'https://rpc-l1.jibchain.net/' -H 'content-type: application/json' --data-raw '{"jsonrpc":"2.0","id":4,"method":"eth_call","params":[{"data":"0x92208228","to":"0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb","value":"0x0"},"latest"]}' | jq`}</pre>

					<h4 class="text-md font-medium mb-2">Get Latest Record</h4>
					<pre class="text-sm whitespace-pre-wrap bg-gray-600 text-green-300 p-4 rounded overflow-x-auto font-mono mb-6">{`curl 'https://rpc-l1.jibchain.net/' -H 'content-type: application/json' --data-raw '{"jsonrpc":"2.0","id":2,"method":"eth_call","params":[{"data":"0x2f63bd6a000000000000000000000000cb0e58b011924e049ce4b4d62298edf43dff0bdd","to":"0xCd3Ec17ddFDa24f8F97131fa0FDf20e7cbd1A8Bb","value":"0x0"},"latest"]}' | jq`}</pre>

					<h3 class="text-lg font-semibold mb-3 mt-6">Function Selectors</h3>
					<div class="bg-white p-3 rounded">
						<p><code>getAllFields()</code>: <strong>0x92208228</strong></p>
						<p><code>getLatestRecord(address)</code>: <strong>0x2f63bd6a</strong></p>
					</div>

					<h3 class="text-lg font-semibold mb-3 mt-6">Alternative Store Addresses</h3>
					<div class="bg-white p-3 rounded">
						<p><strong>FloodBoy002:</strong> 0x81ECfbd31D86bc8f3A581bD2f7c0f54B7498AC94</p>
						<p><strong>FloodBoy003:</strong> 0x935B21D73bE382ba9D5Af56007502ea1d5E3348B</p>
						<p><strong>FloodBoy004:</strong> 0xD591c530F8c8A62576349a5a0cc9F08C30a50Fab</p>
						<p class="text-sm text-gray-600 mt-2">See <a href="/stores" class="text-blue-600 hover:underline">/stores page</a> for complete list of 100 deployed stores</p>
					</div>

					<h3 class="text-lg font-semibold mb-3 mt-6">Data Processing & Interpretation</h3>
					<div class="bg-white p-3 rounded">
						<div class="mb-4">
							<p class="mb-3"><strong>üî¢ Understanding Scaling Factors</strong></p>
							<p class="text-sm text-gray-600 mb-3">FloodBoy stores decimal values as integers to avoid floating-point precision issues on the blockchain. Each field includes a scaling factor that tells you how to convert the raw integer back to the real value.</p>
							
							<div class="grid md:grid-cols-2 gap-4 mb-4">
								<div class="border rounded p-3">
									<h5 class="font-medium mb-2">‚ö° Battery Voltage (x100)</h5>
									<div class="text-sm space-y-1">
										<p><strong>Raw:</strong> 1291</p>
										<p><strong>Formula:</strong> 1291 √∑ 100 = 12.91</p>
										<p><strong>Result:</strong> 12.91 V</p>
										<p class="text-gray-600">Range typically 11-14V for healthy battery</p>
									</div>
								</div>
								<div class="border rounded p-3">
									<h5 class="font-medium mb-2">üåä Water Depth (x10000)</h5>
									<div class="text-sm space-y-1">
										<p><strong>Raw:</strong> 2700</p>
										<p><strong>Formula:</strong> 2700 √∑ 10000 = 0.27</p>
										<p><strong>Result:</strong> 0.27 m</p>
										<p class="text-gray-600">Depth from sensor to water surface</p>
									</div>
								</div>
							</div>
							
							<div class="bg-blue-50 p-3 rounded mb-4">
								<h5 class="font-medium mb-2">üìè Installation Height vs Water Depth</h5>
								<div class="text-sm space-y-2">
									<p><strong>Installation Height:</strong> Fixed distance from sensor to ground level (e.g., 3.02m)</p>
									<p><strong>Water Depth:</strong> Current distance from sensor to water surface (e.g., 0.27m)</p>
									<p><strong>Flood Level:</strong> Installation Height - Water Depth = 3.02m - 0.27m = 2.75m above ground</p>
									<p class="text-blue-700"><strong>üí° Lower water depth readings = Higher flood levels!</strong></p>
								</div>
							</div>
							
							<div class="bg-gray-50 p-3 rounded">
								<h5 class="font-medium mb-2">üïí Timestamp Processing</h5>
								<div class="text-sm space-y-1">
									<p><strong>Format:</strong> Unix timestamp (seconds since 1970-01-01)</p>
									<p><strong>Example:</strong> 1748044727 ‚Üí 2025-01-23 12:25:27 UTC</p>
									<p><strong>JavaScript:</strong> <code>new Date(timestamp * 1000)</code></p>
									<p><strong>Python:</strong> <code>datetime.fromtimestamp(timestamp)</code></p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</section>
		</div>
	</div>
</BaseLayout>