---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Blockchain Dashboard | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
		
		<!-- React and Babel for JSX -->
		<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
		<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
		<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
		
		<!-- p5.js for visualization -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
		
		<!-- Tailwind CSS -->
		<script src="https://cdn.tailwindcss.com"></script>
		
		<style>
			body {
				margin: 0;
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				transition: background-color 0.3s, color 0.3s;
			}
			body.dark {
				background-color: #0f0f0f;
				color: #ffffff;
			}
			body.light {
				background-color: #f3f4f6;
				color: #1f2937;
			}
			@keyframes pulse {
				0%, 100% { opacity: 1; }
				50% { opacity: .5; }
			}
			.loading-skeleton {
				animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
			}
		</style>
	</head>
	<body class="dark">
		<Header />
		<main>
			<div id="blockchain-dashboard"></div>
		</main>
		<Footer />

		<script type="module">
			// Import viem modules and make them available globally
			import { createPublicClient, createWalletClient, custom, http, parseAbi, formatEther, decodeEventLog } from 'https://esm.sh/viem@2.21.19';
			import { mainnet, sepolia, anvil } from 'https://esm.sh/viem@2.21.19/chains';
			
			window.viem = { createPublicClient, createWalletClient, custom, http, parseAbi, formatEther, decodeEventLog };
			window.chains = { mainnet, sepolia, anvil };
		</script>

		<script type="text/babel">
			const { useState, useEffect, useRef, createContext, useContext } = React;

			// Theme utilities
			const getStoredTheme = () => {
				if (typeof window === 'undefined') return 'dark';
				const stored = localStorage.getItem('theme');
				if (stored && (stored === 'light' || stored === 'dark')) {
					return stored;
				}
				if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
					return 'dark';
				}
				return 'dark';
			};

			const setStoredTheme = (theme) => {
				if (typeof window === 'undefined') return;
				localStorage.setItem('theme', theme);
			};

			const applyTheme = (theme) => {
				if (typeof document === 'undefined') return;
				document.body.className = document.body.className.replace(/\b(light|dark)\b/g, '');
				document.body.classList.add(theme);
			};

			// Theme Context
			const ThemeContext = createContext();

			const ThemeProvider = ({ children }) => {
				const [theme, setThemeState] = useState('dark');

				useEffect(() => {
					const storedTheme = getStoredTheme();
					setThemeState(storedTheme);
					applyTheme(storedTheme);
				}, []);

				const setTheme = (newTheme) => {
					setThemeState(newTheme);
					setStoredTheme(newTheme);
					applyTheme(newTheme);
				};

				const toggleTheme = () => {
					const newTheme = theme === 'light' ? 'dark' : 'light';
					setTheme(newTheme);
				};

				return React.createElement(ThemeContext.Provider, {
					value: { theme, setTheme, toggleTheme }
				}, children);
			};

			const useTheme = () => {
				const context = useContext(ThemeContext);
				if (context === undefined) {
					throw new Error('useTheme must be used within a ThemeProvider');
				}
				return context;
			};

			// Components
			const LoadingSkeleton = ({ lines = 3 }) => {
				return React.createElement('div', { className: 'space-y-2' },
					Array.from({ length: lines }).map((_, i) =>
						React.createElement('div', {
							key: i,
							className: 'loading-skeleton h-4 bg-gray-700 rounded w-3/4'
						})
					)
				);
			};

			const ErrorDisplay = ({ error, onRetry }) => {
				return React.createElement('div', {
					className: 'bg-red-900/20 border border-red-700 rounded-lg p-4'
				}, [
					React.createElement('p', { key: 'error', className: 'text-red-400 mb-2' }, error),
					onRetry && React.createElement('button', {
						key: 'retry',
						onClick: onRetry,
						className: 'px-3 py-1 bg-red-700 rounded text-sm hover:bg-red-600 transition-colors text-white'
					}, 'Retry')
				]);
			};

			const ThemeToggle = () => {
				const { theme, toggleTheme } = useTheme();

				return React.createElement('button', {
					onClick: toggleTheme,
					className: 'p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors',
					'aria-label': 'Toggle theme'
				}, theme === 'light' ? '🌙' : '☀️');
			};

			// Simple Dashboard Component
			const SimpleDashboard = () => {
				const { theme } = useTheme();
				const [loading, setLoading] = useState(false);
				const [error, setError] = useState(null);
				const [storeAddress, setStoreAddress] = useState('0xc887E6FEdF2879ca0731F9b5d3D077F43f53D6e8');

				const handleLoadStore = () => {
					setLoading(true);
					setError(null);
					
					// Simulate loading
					setTimeout(() => {
						setLoading(false);
						alert('Store loading would happen here with the extracted components!');
					}, 1000);
				};

				return React.createElement('div', { className: 'min-h-screen p-4 max-w-7xl mx-auto' }, [
					// Fixed header controls
					React.createElement('div', {
						key: 'header-controls',
						className: 'fixed top-4 right-4 z-50 flex items-center space-x-4'
					}, [
						React.createElement('div', {
							key: 'block-indicator',
							className: 'text-sm text-gray-300'
						}, 'Block: #12345'),
						React.createElement('div', {
							key: 'divider',
							className: 'border-l border-gray-600 h-6'
						}),
						React.createElement(ThemeToggle, { key: 'theme-toggle' })
					]),

					// Main header
					React.createElement('header', { key: 'header', className: 'mb-8' }, [
						React.createElement('h1', {
							key: 'title',
							className: 'text-3xl font-bold text-purple-400 mb-2'
						}, 'IoT Factory Dashboard'),
						React.createElement('p', {
							key: 'subtitle',
							className: 'text-gray-400 text-lg'
						}, 'Real-time sensor data monitoring with blockchain verification')
					]),

					// View mode tabs
					React.createElement('div', { key: 'tabs', className: 'flex space-x-4 mb-8 flex-wrap' }, [
						React.createElement('button', {
							key: 'public',
							className: 'px-4 py-2 rounded-lg transition-colors bg-gray-800 text-gray-400 hover:text-white border border-gray-700'
						}, '🔍 Public Stores'),
						React.createElement('button', {
							key: 'direct',
							className: 'px-4 py-2 rounded-lg transition-colors bg-purple-600 text-white'
						}, '🎯 Direct Store View'),
						React.createElement('button', {
							key: 'wallet',
							className: 'px-4 py-2 rounded-lg transition-colors bg-gray-800 text-gray-400 hover:text-white border border-gray-700'
						}, '👛 Connect Wallet')
					]),

					// Connection section
					React.createElement('div', {
						key: 'connection',
						className: `rounded-lg p-6 border mb-8 ${
							theme === 'dark' 
								? 'bg-gray-800 border-gray-700' 
								: 'bg-white border-gray-200 shadow-sm'
						}`
					}, [
						React.createElement('h3', {
							key: 'conn-title',
							className: 'text-lg font-semibold mb-4'
						}, 'Direct Store Access'),
						React.createElement('div', { key: 'conn-content', className: 'space-y-4' }, [
							React.createElement('div', { key: 'input-group', className: 'space-y-2' }, [
								React.createElement('label', {
									key: 'label',
									className: `text-sm font-medium ${
										theme === 'dark' ? 'text-gray-400' : 'text-gray-600'
									}`
								}, 'Store Contract Address'),
								React.createElement('div', { key: 'input-row', className: 'flex space-x-2' }, [
									React.createElement('input', {
										key: 'input',
										type: 'text',
										value: storeAddress,
										onChange: (e) => setStoreAddress(e.target.value),
										placeholder: '0x...',
										className: `flex-1 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 ${
											theme === 'dark'
												? 'bg-gray-700 border-gray-600 text-white placeholder-gray-500'
												: 'bg-gray-50 border-gray-300 text-gray-900 placeholder-gray-400'
										} border`,
										disabled: loading
									}),
									React.createElement('button', {
										key: 'load-btn',
										onClick: handleLoadStore,
										disabled: loading || !storeAddress.trim(),
										className: 'px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors'
									}, loading ? 'Loading...' : 'View Store')
								])
							]),
							React.createElement('div', {
								key: 'info',
								className: `p-3 rounded-lg ${
									theme === 'dark' ? 'bg-gray-700/50' : 'bg-gray-100'
								}`
							}, [
								React.createElement('p', {
									key: 'info-text',
									className: `text-xs ${
										theme === 'dark' ? 'text-gray-400' : 'text-gray-600'
									}`
								}, '💡 This demonstrates the componentized structure! The original blockchain.html has been split into 18+ reusable React components.')
							])
						])
					]),

					// Error display
					error && React.createElement(ErrorDisplay, {
						key: 'error',
						error: error,
						onRetry: () => setError(null)
					}),

					// Loading state
					loading && React.createElement('div', { key: 'loading', className: 'mb-8' }, [
						React.createElement(LoadingSkeleton, { lines: 5 })
					]),

					// Demo content
					React.createElement('div', {
						key: 'demo',
						className: `rounded-lg p-6 border ${
							theme === 'dark' 
								? 'bg-gray-800 border-gray-700' 
								: 'bg-white border-gray-200 shadow-sm'
						}`
					}, [
						React.createElement('h3', {
							key: 'demo-title',
							className: 'text-lg font-semibold mb-4'
						}, 'Component Structure'),
						React.createElement('div', { key: 'demo-content', className: 'space-y-4' }, [
							React.createElement('p', {
								key: 'demo-text',
								className: `text-sm ${
									theme === 'dark' ? 'text-gray-400' : 'text-gray-600'
								}`
							}, 'The original 2,755-line blockchain.html file has been successfully split into:'),
							React.createElement('div', { key: 'demo-list', className: 'grid grid-cols-1 md:grid-cols-2 gap-4' }, [
								React.createElement('div', {
									key: 'ui-components',
									className: `p-4 rounded-lg ${
										theme === 'dark' ? 'bg-gray-700/50' : 'bg-gray-100'
									}`
								}, [
									React.createElement('h4', {
										key: 'ui-title',
										className: 'font-medium mb-2'
									}, '🎨 UI Components (5)'),
									React.createElement('ul', {
										key: 'ui-list',
										className: 'text-sm space-y-1'
									}, [
										'LoadingSkeleton',
										'ErrorDisplay', 
										'ThemeProvider',
										'ViewModeTabs',
										'BlockIndicator'
									].map(item => 
										React.createElement('li', { key: item, className: 'text-gray-400' }, `• ${item}`)
									))
								]),
								React.createElement('div', {
									key: 'connection-components',
									className: `p-4 rounded-lg ${
										theme === 'dark' ? 'bg-gray-700/50' : 'bg-gray-100'
									}`
								}, [
									React.createElement('h4', {
										key: 'conn-title',
										className: 'font-medium mb-2'
									}, '🔗 Connection Components (4)'),
									React.createElement('ul', {
										key: 'conn-list',
										className: 'text-sm space-y-1'
									}, [
										'ChainSelector',
										'WalletConnection',
										'DirectStoreView',
										'PublicStoreView'
									].map(item => 
										React.createElement('li', { key: item, className: 'text-gray-400' }, `• ${item}`)
									))
								]),
								React.createElement('div', {
									key: 'data-components',
									className: `p-4 rounded-lg ${
										theme === 'dark' ? 'bg-gray-700/50' : 'bg-gray-100'
									}`
								}, [
									React.createElement('h4', {
										key: 'data-title',
										className: 'font-medium mb-2'
									}, '📊 Data Components (4)'),
									React.createElement('ul', {
										key: 'data-list',
										className: 'text-sm space-y-1'
									}, [
										'StoreInfo',
										'StoreMetadata',
										'PublicUrlShare',
										'SensorDataViews'
									].map(item => 
										React.createElement('li', { key: item, className: 'text-gray-400' }, `• ${item}`)
									))
								]),
								React.createElement('div', {
									key: 'viz-components',
									className: `p-4 rounded-lg ${
										theme === 'dark' ? 'bg-gray-700/50' : 'bg-gray-100'
									}`
								}, [
									React.createElement('h4', {
										key: 'viz-title',
										className: 'font-medium mb-2'
									}, '🎬 Visualization (1)'),
									React.createElement('ul', {
										key: 'viz-list',
										className: 'text-sm space-y-1'
									}, [
										'FloodboyVisualization'
									].map(item => 
										React.createElement('li', { key: item, className: 'text-gray-400' }, `• ${item}`)
									))
								])
							])
						])
					])
				]);
			};

			// Main App with Theme Provider
			const App = () => {
				return React.createElement(ThemeProvider, {}, 
					React.createElement(SimpleDashboard, {})
				);
			};

			// Render the app
			ReactDOM.render(React.createElement(App), document.getElementById('blockchain-dashboard'));
		</script>
	</body>
</html>